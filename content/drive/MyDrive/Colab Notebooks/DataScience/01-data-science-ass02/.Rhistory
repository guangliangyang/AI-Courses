kable(tb_part1, format = "latex"
, caption = "The data statistics  after Cleaning (Part A)"
, booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c("striped")) %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE)
# Display second part of the table
kable(tb_part2, format = "latex"
, caption = "The data statistics  after Cleaning (Part B)"
, booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE)
# Divide prices relative to regional average price into multiple groups
tb.analysis1 <- tb.clean %>%
mutate(price_ratio = price / region_average_price)
# Calculate the mean and standard deviation of the price ratio
price_mean <- mean(tb.analysis1$price_ratio, na.rm = TRUE)
price_sd <- sd(tb.analysis1$price_ratio, na.rm = TRUE)
# Divide prices relative to regional average price into three groups
tb.analysis1 <- tb.analysis1 %>%
mutate(price_group = case_when(
price_ratio <= (price_mean - price_sd) ~ "below_avg",
price_ratio > (price_mean - price_sd) & price_ratio <= price_mean ~ "avg_minus",
price_ratio > price_mean & price_ratio <= (price_mean + price_sd) ~ "avg_plus",
price_ratio > (price_mean + price_sd) ~ "above_avg"
))
# Calculate mean and standard deviation
scores.avg <- tb.analysis1 %>%
group_by(price_group) %>%
summarise(average = mean(review_scores_rating, na.rm = TRUE),
SD = sd(review_scores_rating, na.rm = TRUE))
#print(scores.avg)
kable(scores.avg, align="lcrlll", #normally use r alignment for numbers
digits=3,
caption = "review scores rating  mean and standard deviation for different price")
# Perform ANOVA
anova_result <- aov(review_scores_rating ~ price_group, data = tb.analysis1)
#print(summary(anova_result))
# Generate box plot
boxplot(review_scores_rating ~ price_group
, caption = "review scores rating  mean and standard deviation for different price "
, data = tb.analysis1, xlab = "Price Group", ylab = "Review Scores Rating")
# Perform t-test between two specific groups
group1 <- tb.analysis1 %>% filter(price_group == "below_avg") %>% pull(review_scores_rating)
group2 <- tb.analysis1 %>% filter(price_group == "above_avg") %>% pull(review_scores_rating)
# Perform t-test============================================
t_test_result <- t.test(group1, group2, var.equal = TRUE)
#print(t_test_result)
# Extract relevant information
mean1 <- mean(group1)
se1 <- sd(group1) / sqrt(length(group1))
mean2 <- mean(group2)
se2 <- sd(group2) / sqrt(length(group2))
t_value <- t_test_result$statistic
df <- t_test_result$parameter
p_value <- t_test_result$p.value
ci_lower <- t_test_result$conf.int[1]
ci_upper <- t_test_result$conf.int[2]
# Create the data frame
data2 <- data.frame(
Statistic_Name = c("below_avg_mean1", "below_avg_se1", "below_avg_mean2", "below_avg_se2", "t_value", "df", "p_value", "CI_Lowe", "CI_Uppe"),
Value = c(mean1, se1, mean2, se2, t_value, df, p_value, ci_lower, ci_upper)
)
kable(data2, align="lcrlll", #normally use r alignment for numbers
digits=3,
caption = "T-test Summary “below_avg” Vs. “above_avg” ")
# Build linear regression model
linear_model <- lm(review_scores_rating ~ price + region_average_price + bedrooms + accommodates + bathrooms + room_type, data = tb.clean)
# View regression results
reg_summary <- summary(linear_model)
reg_summary
# Generate residual plot
residuals <- resid(linear_model)
fitted_values <- fitted(linear_model)
summary_df <- data.frame(
Coefficient = c("(Intercept)", "Price", "Region Average Price", "Bedrooms", "Accommodates", "Bathrooms", "Room Type (Private Room)", "Room Type (Shared Room)"),
Estimate = round(c(reg_summary$coefficients[1, 1], reg_summary$coefficients[2, 1], reg_summary$coefficients[3, 1], reg_summary$coefficients[4, 1], reg_summary$coefficients[5, 1], reg_summary$coefficients[6, 1], reg_summary$coefficients[7, 1], reg_summary$coefficients[8, 1]), 3),
`Std_Error` = round(c(reg_summary$coefficients[1, 2], reg_summary$coefficients[2, 2], reg_summary$coefficients[3, 2], reg_summary$coefficients[4, 2], reg_summary$coefficients[5, 2], reg_summary$coefficients[6, 2], reg_summary$coefficients[7, 2], reg_summary$coefficients[8, 2]), 3),
`t_value` = round(c(reg_summary$coefficients[1, 3], reg_summary$coefficients[2, 3], reg_summary$coefficients[3, 3], reg_summary$coefficients[4, 3], reg_summary$coefficients[5, 3], reg_summary$coefficients[6, 3], reg_summary$coefficients[7, 3], reg_summary$coefficients[8, 3]), 3),
`P_value_Sig` = format.pval(c(reg_summary$coefficients[1, 4], reg_summary$coefficients[2, 4], reg_summary$coefficients[3, 4], reg_summary$coefficients[4, 4], reg_summary$coefficients[5, 4], reg_summary$coefficients[6, 4], reg_summary$coefficients[7, 4], reg_summary$coefficients[8, 4]), digits = 3)
)
# Display the dataframe using kable
kable(summary_df, caption = "AirBNB Data Linear Regression Model Summary", escape = TRUE)
# kable_styling(font_size = 7)
cat(sprintf("Residual standard error: %.3f", reg_summary$sigma))
cat(sprintf("Multiple R-squared: %.5f", reg_summary$r.squared))
cat(sprintf("Adjusted R-squared: %.5f", reg_summary$adj.r.squared))
cat(sprintf("F-statistic: %.1f (p-value < %.1e)", reg_summary$fstatistic[1], pf(reg_summary$fstatistic[1], reg_summary$fstatistic[2], reg_summary$fstatistic[3], lower.tail = FALSE)))
# Generate residual plot with clearer labels
ggplot(data = NULL, aes(x = fitted_values, y = residuals)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "blue") +
labs(title = "Residuals vs Fitted Values",
x = "Fitted Values (Predicted Review Scores)",
y = "Residuals (Errors)") +
theme_minimal()
# Generate QQ plot with clearer labels
qqPlot(linear_model, main = "QQ Plot of Residuals",
ylab = "Standardized Residuals",
xlab = "Theoretical Quantiles")
# Add a new binary variable indicating high ratings
tb.analysis3 <- tb.clean %>%
mutate(high_rating = ifelse(review_scores_rating >= 95, 1, 0))
# Build logistic regression model
logistic_model <- glm(high_rating ~ price + region_average_price + host_since_year + number_of_reviews + host_response_rate , data = tb.analysis3, family = binomial)
# View regression results
reg_summary <- summary(logistic_model)
#  Generate predicted values
predicted <- ifelse(predict(logistic_model, type = "response") > 0.5, 1, 0)
reg_summary
# Initialize empty vectors for coefficients
coef_names <- c("(Intercept)", "Price", "Region Average Price", "Host Since Year", "Number Of Reviews", "Host Response Rate")
estimates <- numeric(length(coef_names))
std_errors <- numeric(length(coef_names))
z_values <- numeric(length(coef_names))
p_values <- character(length(coef_names))
# Loop through each coefficient
for (i in 1:length(coef_names)) {
estimates[i] <- round(reg_summary$coefficients[i, 1], 3)
std_errors[i] <- round(reg_summary$coefficients[i, 2], 3)
z_values[i] <- round(reg_summary$coefficients[i, 3], 3)
p_values[i] <- format.pval(reg_summary$coefficients[i, 4], digits = 3)
}
# Create the summary data frame
summary_df <- data.frame(
Coefficient = coef_names,
Estimate = estimates,
`Std. Error` = std_errors,
`z value` = z_values,
`p-value` = p_values
)
knitr::kable(summary_df, caption = "AirBNB Data Logistic Regression Model Summary")
# Add confusion matrix result
conf_matrix <- confusionMatrix(factor(predicted), factor(tb.analysis3$high_rating))
conf_matrix_df <- data.frame(
Reference = c("0", "1"),
`Prediction 0` = c(conf_matrix$table[1, 1], conf_matrix$table[1, 2]),
`Prediction 1` = c(conf_matrix$table[2, 1], conf_matrix$table[2, 2])
)
knitr::kable(conf_matrix_df, caption = "Confusion Matrix for Logistic Regression Model")
# Adding additional statistics
s_value = c()
s_name = c("Accuracy", "Kappa", "AccuracyLower", "AccuracyUpper", "AccuracyNull", "AccuracyPValue", "McnemarPValue")
for(x in s_name){
s_value <- append(s_value, conf_matrix[["overall"]][[x]])
}
data2 <- data.frame(
Statistic_Name = s_name,
Value = s_value
)
knitr::kable(data2, caption = "Additional Statistics from Confusion Matrix")
#Generate ROC curve and AUC value
pred <- prediction(predict(logistic_model, type = "response"), tb.analysis3$high_rating)
perf <- performance(pred, "tpr", "fpr")
auc <- performance(pred, "auc")
auc <- auc@y.values[[1]]
plot(perf, col = "blue", main = "ROC Curve of High Ratings Prediction",)
abline(a = 0, b = 1, lty = 2, col = "gray")
legend("bottomright", legend = paste("AUC =", round(auc, 3)), col = "blue", lty = 1)
format(Sys.time(), '%d %B %Y')
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
necessary_packages <- c("dplyr", "ggplot2", "gridExtra"
,"kableExtra","stringr","patchwork"
,"car","caret","ROCR","knitr","broom","kableExtra","readr")
#Generate BibTeX entries for the packages
knitr::write_bib(necessary_packages, file = "packages.bib")
# Combine two .bib files into one
bib_files <- c("packages.bib", "references.bib")
combined_bib <- "reference_list.bib"
# Read and combine the content of both .bib files
bib_content <- unlist(lapply(bib_files, readLines))
writeLines(bib_content, combined_bib)
#Install packages
for (pkg in necessary_packages) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
#lapply library
lapply(necessary_packages, library, character.only = TRUE)
# Create a data frame of the variables with Airbnb data types
variables <- data.frame(
Variable = c("host_id", "host_name", "host_since_year", "host_since_anniversary",
"Customer Since", "Age in years", "id", "neighbourhood_cleansed",
"city", "city_translated", "state", "state_translated",
"zipcode",                "country", "latitude", "longitude",
"property_type", "room_type",                "accommodates", "bathrooms",
"bedrooms", "beds", "bed_type", "price",
"guests_included", "extra_people", "minimum_nights", "customers @ 50% review rate",
"Daily Rev per 2 guests, unless limited to 1",  "Min Nights", "Total Rev", "host_response_time",
"host_response_rate",                "number_of_reviews", "review_scores_rating", "review_scores_accuracy",
"review_scores _cleanliness", "review_scores_checkin",                "review_scores _communication", "review_scores_location",
"review_scores_value"),
DataType = c("integer", "character", "integer", "date",
"integer", "integer", "integer", "character",
"character", "character", "character", "character",
"character",                "character", "numeric", "numeric",
"character", "character",                "integer", "integer",
"integer", "integer", "character", "numeric",
"integer", "numeric", "integer",                "integer",
"numeric",                "integer", "numeric", "character",
"numeric",                "integer", "integer", "integer",
"integer", "integer",                "integer", "integer", "integer"),
Description = c("Unique identifier for the host", "Name of the host", "Year when the host started",  "Anniversary date of the host's start",
"Duration since the customer has been with Airbnb", "Age of the listing in years", "Unique identifier for the listing",                   "Specific neighborhood of the listing",
"City where the listing is located","Translated city name", "State where the listing is located", "Translated state name",
"Zip code of the listing location",   "Country of the listing", "Latitude coordinate of the listing", "Longitude coordinate of the listing",
"Type of property (e.g., apartment, house)",
"Type of room (e.g., entire home/apt, private room)",
"Number of guests the listing accommodates", "Number of bathrooms",
"Number of bedrooms", "Number of beds", "Type of bed (e.g., real bed, futon)",
"Price per night", "Number of guests included in the price",
"Cost for additional guests", "Minimum number of nights required to book",
"Number of customers at a 50% review rate", "Daily revenue per 2 guests",
"Minimum nights required", "Total revenue generated",
"Time taken by the host to respond", "Response rate of the host",
"Total number of reviews received", "Overall rating score from reviews",
"Accuracy rating score from reviews", "Cleanliness rating score from reviews",
"Check-in rating score from reviews", "Communication rating score from reviews",
"Location rating score from reviews", "Value rating score from reviews")
)
# Display the data frame as a table with horizontal lines
variables %>%
kable(caption = "List of Variables in the Airbnb Dataset", booktabs = TRUE) %>%
kable_styling(full_width = FALSE) %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, width = "4cm") %>%  # Adjust the width of the first column
column_spec(2, width = "2cm") %>%  # Adjust the width of the second column
row_spec(1:nrow(variables), hline_after = TRUE)
include_graphics("data_screenshot.jpg")
# import dataset and filter out apartment
tb<-read.csv("AirBnb.csv") %>%   filter(property_type=="Apartment")
# Display total number of rows
total_rows <- nrow(tb)
# Clean variable names
clean_names <- function(names) {
names %>%
tolower() %>%
str_replace_all(" ", "_") %>%
str_replace_all("[^[:alnum:]_]", "")
}
colnames(tb) <- clean_names(colnames(tb))
# Get column names, column types, and count of NA values
column_info <- data.frame(
Column_Names = names(tb),
Column_Types = sapply(tb, class),
NA_Count = sapply(tb, function(x) sum(is.na(x)))
)
kable(column_info[, 2:3], col.names = c("Column Names", "Column Types", "NA Count")
, caption = "Columns after Tidying the variable names") %>%
kable_styling(latex_options = c("striped", "scale_down"))
# select the necessary variables
tb.selected<-tb %>%
select(price,accommodates,bathrooms,bedrooms,room_type,
host_response_rate,review_scores_rating,neighbourhood_cleansed
,host_since_year  ,  number_of_reviews)
# Remove duplicate rows
tb.selected <- unique(tb.selected)
tb.selected <- tb.selected %>%
rename(region = neighbourhood_cleansed)
# change the type of some variables
tb.selected$price<-parse_number(tb.selected$price)
tb.selected$host_response_rate<-as.numeric(tb.selected$host_response_rate)
tb.selected$review_scores_rating<-as.numeric(tb.selected$review_scores_rating)
tb.selected$accommodates<-as.numeric(tb.selected$accommodates)
tb.selected$bathrooms<-as.numeric(tb.selected$bathrooms)
tb.selected$bedrooms<-as.numeric(tb.selected$bedrooms)
tb.selected$host_since_year<-as.numeric(tb.selected$host_since_year)
tb.selected$number_of_reviews<-as.numeric(tb.selected$number_of_reviews)
# remove the observations having missing values
tb.clean<-tb.selected %>% na.omit()
# Display boxplots for each relevant variable to identify outliers
variables <- c("price", "accommodates", "bathrooms", "bedrooms","host_since_year","number_of_reviews")
# Create plots for each variable
plot_list <- lapply(variables, function(var) {
ggplot(tb.clean, aes_string(x = "factor(1)", y = var)) +
geom_boxplot() +
labs(title =var, x = "", y = var) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.title = element_text(hjust = 0.5))
})
# Combine all plots into one plot using patchwork
combined_plot <- wrap_plots(plot_list) + plot_layout(ncol = 2)
# Print combined plot
print(combined_plot)
# Handle invalid data
tb.clean <- tb.clean %>%
filter(price > 0,
accommodates > 0, accommodates < 12,
bathrooms >= 0, bedrooms > 0)
# Handle outliers (e.g., remove outliers in price)
Q1 <- quantile(tb.clean$price, 0.25)
Q3 <- quantile(tb.clean$price, 0.75)
IQR <- Q3 - Q1
tb.clean <- tb.clean %>%
filter(price >= (Q1 - 1.5 * IQR) & price <= (Q3 + 1.5 * IQR))
# Example: Calculate average price by region
tb.clean <- tb.clean %>%
group_by(region) %>%
mutate(region_average_price = mean(price, na.rm = TRUE)) %>%
ungroup()
tb.clean <- tb.clean %>% select(-region)
# Convert categorical variables to factor type
tb.clean <- tb.clean %>%
mutate(across(c(room_type), as.factor))
tb_head <- head(tb.clean)
#kable(tb_head, format="latex", booktabs=TRUE) %>%
#  kable_styling(latex_options="scale_down")
# Split the dataframe into two parts
tb_part1 <- tb_head[,1:6 ]
tb_part2 <- tb_head[,7:10 ]
# Display first part of the table
kable(tb_part1, format = "latex"
, caption = "Data after Cleaning (Part A)"
, booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE)
# Display second part of the table
kable(tb_part2, format = "latex"
, caption = "Data after Cleaning (Part B)"
, booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE)
#kable(summary(tb.clean))
tb_head <-summary(tb.clean)
# Split the dataframe into two parts
tb_part1 <- tb_head[,1:5 ]
tb_part2 <- tb_head[,6:8 ]
# Display first part of the table
kable(tb_part1, format = "latex"
, caption = "The data statistics  after Cleaning (Part A)"
, booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c("striped")) %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE)
# Display second part of the table
kable(tb_part2, format = "latex"
, caption = "The data statistics  after Cleaning (Part B)"
, booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE)
# Divide prices relative to regional average price into multiple groups
tb.analysis1 <- tb.clean %>%
mutate(price_ratio = price / region_average_price)
# Calculate the mean and standard deviation of the price ratio
price_mean <- mean(tb.analysis1$price_ratio, na.rm = TRUE)
price_sd <- sd(tb.analysis1$price_ratio, na.rm = TRUE)
# Divide prices relative to regional average price into three groups
tb.analysis1 <- tb.analysis1 %>%
mutate(price_group = case_when(
price_ratio <= (price_mean - price_sd) ~ "below_avg",
price_ratio > (price_mean - price_sd) & price_ratio <= price_mean ~ "avg_minus",
price_ratio > price_mean & price_ratio <= (price_mean + price_sd) ~ "avg_plus",
price_ratio > (price_mean + price_sd) ~ "above_avg"
))
# Calculate mean and standard deviation
scores.avg <- tb.analysis1 %>%
group_by(price_group) %>%
summarise(average = mean(review_scores_rating, na.rm = TRUE),
SD = sd(review_scores_rating, na.rm = TRUE))
#print(scores.avg)
kable(scores.avg, align="lcrlll", #normally use r alignment for numbers
digits=3,
caption = "review scores rating  mean and standard deviation for different price")
# Perform ANOVA
anova_result <- aov(review_scores_rating ~ price_group, data = tb.analysis1)
#print(summary(anova_result))
# Generate box plot
boxplot(review_scores_rating ~ price_group
, caption = "review scores rating  mean and standard deviation for different price "
, data = tb.analysis1, xlab = "Price Group", ylab = "Review Scores Rating")
# Perform t-test between two specific groups
group1 <- tb.analysis1 %>% filter(price_group == "below_avg") %>% pull(review_scores_rating)
group2 <- tb.analysis1 %>% filter(price_group == "above_avg") %>% pull(review_scores_rating)
# Perform t-test============================================
t_test_result <- t.test(group1, group2, var.equal = TRUE)
#print(t_test_result)
# Extract relevant information
mean1 <- mean(group1)
se1 <- sd(group1) / sqrt(length(group1))
mean2 <- mean(group2)
se2 <- sd(group2) / sqrt(length(group2))
t_value <- t_test_result$statistic
df <- t_test_result$parameter
p_value <- t_test_result$p.value
ci_lower <- t_test_result$conf.int[1]
ci_upper <- t_test_result$conf.int[2]
# Create the data frame
data2 <- data.frame(
Statistic_Name = c("below_avg_mean1", "below_avg_se1", "below_avg_mean2", "below_avg_se2", "t_value", "df", "p_value", "CI_Lowe", "CI_Uppe"),
Value = c(mean1, se1, mean2, se2, t_value, df, p_value, ci_lower, ci_upper)
)
kable(data2, align="lcrlll", #normally use r alignment for numbers
digits=3,
caption = "T-test Summary “below_avg” Vs. “above_avg” ")
# Build linear regression model
linear_model <- lm(review_scores_rating ~ price + region_average_price + bedrooms + accommodates + bathrooms + room_type, data = tb.clean)
# View regression results
reg_summary <- summary(linear_model)
reg_summary
# Generate residual plot
residuals <- resid(linear_model)
fitted_values <- fitted(linear_model)
# Coefficients to be used in the dataframe
coef_names <- c("(Intercept)", "Price", "Region Average Price", "Bedrooms", "Accommodates", "Bathrooms", "Room Type (Private Room)", "Room Type (Shared Room)")
# Initialize empty vectors for the dataframe
estimates <- numeric(length(coef_names))
std_errors <- numeric(length(coef_names))
t_values <- numeric(length(coef_names))
p_values <- character(length(coef_names))
# Loop through each coefficient and populate the vectors
for (i in seq_along(coef_names)) {
estimates[i] <- round(reg_summary$coefficients[i, 1], 3)
std_errors[i] <- round(reg_summary$coefficients[i, 2], 3)
t_values[i] <- round(reg_summary$coefficients[i, 3], 3)
p_values[i] <- format.pval(reg_summary$coefficients[i, 4], digits = 3)
}
# Create the summary dataframe
summary_df <- data.frame(
Coefficient = coef_names,
Estimate = estimates,
Std_Error = std_errors,
t_value = t_values,
P_value_Sig = p_values
)
# Display the dataframe using kable
kable(summary_df, caption = "AirBNB Data Linear Regression Model Summary", escape = TRUE)
# kable_styling(font_size = 7)
cat(sprintf("Residual standard error: %.3f", reg_summary$sigma))
cat(sprintf("Multiple R-squared: %.5f", reg_summary$r.squared))
cat(sprintf("Adjusted R-squared: %.5f", reg_summary$adj.r.squared))
cat(sprintf("F-statistic: %.1f (p-value < %.1e)", reg_summary$fstatistic[1], pf(reg_summary$fstatistic[1], reg_summary$fstatistic[2], reg_summary$fstatistic[3], lower.tail = FALSE)))
# Generate residual plot with clearer labels
ggplot(data = NULL, aes(x = fitted_values, y = residuals)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "blue") +
labs(title = "Residuals vs Fitted Values",
x = "Fitted Values (Predicted Review Scores)",
y = "Residuals (Errors)") +
theme_minimal()
# Generate QQ plot with clearer labels
qqPlot(linear_model, main = "QQ Plot of Residuals",
ylab = "Standardized Residuals",
xlab = "Theoretical Quantiles")
# Add a new binary variable indicating high ratings
tb.analysis3 <- tb.clean %>%
mutate(high_rating = ifelse(review_scores_rating >= 95, 1, 0))
# Build logistic regression model
logistic_model <- glm(high_rating ~ price + region_average_price + host_since_year + number_of_reviews + host_response_rate , data = tb.analysis3, family = binomial)
# View regression results
reg_summary <- summary(logistic_model)
#  Generate predicted values
predicted <- ifelse(predict(logistic_model, type = "response") > 0.5, 1, 0)
#reg_summary
# Initialize empty vectors for coefficients
coef_names <- c("(Intercept)", "Price", "Region Average Price", "Host Since Year", "Number Of Reviews", "Host Response Rate")
estimates <- numeric(length(coef_names))
std_errors <- numeric(length(coef_names))
z_values <- numeric(length(coef_names))
p_values <- character(length(coef_names))
# Loop through each coefficient
for (i in 1:length(coef_names)) {
estimates[i] <- round(reg_summary$coefficients[i, 1], 3)
std_errors[i] <- round(reg_summary$coefficients[i, 2], 3)
z_values[i] <- round(reg_summary$coefficients[i, 3], 3)
p_values[i] <- format.pval(reg_summary$coefficients[i, 4], digits = 3)
}
# Create the summary data frame
summary_df <- data.frame(
Coefficient = coef_names,
Estimate = estimates,
`Std. Error` = std_errors,
`z value` = z_values,
`p-value` = p_values
)
knitr::kable(summary_df, caption = "AirBNB Data Logistic Regression Model Summary")
# Add confusion matrix result
conf_matrix <- confusionMatrix(factor(predicted), factor(tb.analysis3$high_rating))
conf_matrix_df <- data.frame(
Reference = c("0", "1"),
`Prediction 0` = c(conf_matrix$table[1, 1], conf_matrix$table[1, 2]),
`Prediction 1` = c(conf_matrix$table[2, 1], conf_matrix$table[2, 2])
)
knitr::kable(conf_matrix_df, caption = "Confusion Matrix for Logistic Regression Model")
# Adding additional statistics
s_value = c()
s_name = c("Accuracy", "Kappa", "AccuracyLower", "AccuracyUpper", "AccuracyNull", "AccuracyPValue", "McnemarPValue")
for(x in s_name){
s_value <- append(s_value, conf_matrix[["overall"]][[x]])
}
data2 <- data.frame(
Statistic_Name = s_name,
Value = s_value
)
knitr::kable(data2, caption = "Additional Statistics from Confusion Matrix")
#Generate ROC curve and AUC value
pred <- prediction(predict(logistic_model, type = "response"), tb.analysis3$high_rating)
perf <- performance(pred, "tpr", "fpr")
auc <- performance(pred, "auc")
auc <- auc@y.values[[1]]
plot(perf, col = "blue", main = "ROC Curve of High Ratings Prediction",)
abline(a = 0, b = 1, lty = 2, col = "gray")
legend("bottomright", legend = paste("AUC =", round(auc, 3)), col = "blue", lty = 1)
format(Sys.time(), '%d %B %Y')
sessionInfo()
