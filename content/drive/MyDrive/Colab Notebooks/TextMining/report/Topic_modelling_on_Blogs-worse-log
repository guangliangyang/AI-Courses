{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/paulsoumyadip/topic_modelling_on-_BBC_articles/blob/main/Topic_modelling_on_BBC_news_article.ipynb","timestamp":1715475185367}],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **PROJECT NAME: TOPIC MODELLING ON BLOGS**"],"metadata":{"id":"r3YoCLrZxELl"}},{"cell_type":"markdown","source":["**Reference**\n","\n","\n","LDA — Latent Dirichlet Allocation\n","https://towardsdatascience.com/topic-modelling-in-python-with-spacy-and-gensim-dc8f7748bdbf\n","\n","\n","https://fouadroumieh.medium.com/topic-modeling-and-semantic-clustering-with-spacy-960dd4ac3c9a\n","\n","\n","Mastering Text Analysis and Topic Modeling with spaCy and Gensim\n","\n","LSI — Latent Semantic Indexing\n","\n","HDP — Hierarchical Dirichlet Process\n","\n","LDA — Latent Dirichlet Allocation\n","\n","https://medium.com/nlplanet/text-analysis-topic-modelling-with-spacy-gensim-4cd92ef06e06\n","\n","\n","7 NLP Techniques for Extracting Information from Unstructured Text using Algorithms\n","\n","https://www.width.ai/post/extracting-information-from-unstructured-text-using-algorithms\n","\n","\n","SAAS\n","\n","https://monkeylearn.com/topic-analysis/\n","\n","evaluate\n","\n","https://iopscience.iop.org/article/10.1088/1742-6596/1748/3/032036/pdf\n","\n","\n","chatGPT\n","\n","https://medium.com/@stephensonebinezer/transform-your-topic-modeling-with-chatgpt-cutting-edge-nlp-f4654b4eac99\n","\n","https://towardsdatascience.com/topic-modelling-using-chatgpt-api-8775b0891d16\n","\n"],"metadata":{"id":"qmgV-yRYGQo8"}},{"cell_type":"markdown","source":["# **PROBLEM DESCRIPTION:**\n","\n","\n","Blogs are a crucial resource in business, providing a wealth of user-generated content that can inform strategic decisions.\n","\n","Analyzing this vast amount of textual data to extract actionable insights is challenging.\n","\n","This project leverages Natural Language Processing (NLP) and machine learning techniques to systematically identify, extract, and cluster key topics from blogs.\n","\n","By employing algorithms such as topic modeling and TF-IDF vectorization, we can discern prevalent themes athat influence consumer behavior.\n","\n","This approach enables businesses to tailor their products and marketing strategies based on real-time customer feedback and trends observed from blog content."],"metadata":{"id":"YRNqiHBMzQK1"}},{"cell_type":"markdown","source":["# **BUSINESS CONTEXT:**\n","* We are employed by an innovation company who has bought the blogs with the objective of innovating new products/services based on what people have been talking about on popular blog sites.\n","* My boss wants to know the two most popular topics that the bloggers have been\n","talking about in the following demographics :  \n","  1.   Males\n","  2.   Females\n","  4.   Age brackets <=20 and over 20\n","  5.   Students\n","  6.   Everyone\n","\n"],"metadata":{"id":"idV5IWauzQGv"}},{"cell_type":"markdown","source":["*Data-Set is  a zipped file named AssignmentBlogData.zip which consists of a set of 19,320 xml formatted text files. These files contain blogs collected from an anonymous blogging site which have been annotated with various types of\n","anonymised metadata. The metadata has been integrated into the filenames. The text in each of the files contains the blogs corresponding to a blogger (as described in the metadata) with blog dates ranging from approximately 2001 to 2004.\n"],"metadata":{"id":"fP0C8VyW_McJ"}},{"cell_type":"markdown","source":["## ***Project Work flow :***\n","\n","\n","1.   Importing Blogs\n","\t\t*   read xml, extract meta data.\n","\t\t*   Check the number of files\n","\t\t*   Check duplicated documents\n","\t\t*   Text Length Check\n","\t\t*   Random Sampling 10000 Records\n","\n","\n","2.   Text Normalization\n","\t\t*   Text Wrangling and Pre-Processing\n","3.   Extract Features Strategies\n","\t\t*   compare extract strategies with static documents\n","\t\t*    analysis and choose 2  strategies\n","\t\t*   add customer stop words\n","\t\t*    Extract Features with 2 strategies\n","\n","\n","4.   Vector Strategies\n","\t\t*   Split token data to different Categories\n","\t\t*   Different Vectorization Strategies\n","5.   Function to Show Topic Result\n","\n","\t\t*   Latent Dirichlet Allocation (LDA)\n","\t\t*   LDA model building and  try to find best number of topics  \n","\t\t*   Print topics  \n","\t\t*   Visualize topics with pyLDAvis\n","\t\t*    Save the report to html\n","\t\t*   Determine which topics each document belongs to\n","\t\t*    Print the original content of each document\n","\n","6.   Comparison of Different Stragtegies\n","7.   Final Report for every categories\n","\n"],"metadata":{"id":"PBk8jBrl3l_M"}},{"cell_type":"markdown","source":["# **Step1: Importing Blogs**"],"metadata":{"id":"9FcJkL3O-mG8"}},{"cell_type":"code","source":["run_local = 0"],"metadata":{"id":"TOYAe_TKv-7S","executionInfo":{"status":"ok","timestamp":1716267545607,"user_tz":-720,"elapsed":510,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","\n","# mounting the drive to load the dataset\n","if run_local != 1:\n","  drive.mount('/content/drive')"],"metadata":{"id":"DnzTKU-QHRXS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267562157,"user_tz":-720,"elapsed":16241,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"4d588172-6db3-481a-e89d-4a427b039f2c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"id":"9qNH3ONjxBrR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267602357,"user_tz":-720,"elapsed":40203,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"d7eff43a-c470-4b1e-aaef-028f76c80475"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.6/2.6 MB\u001b[0m \u001b[31m10.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m431.4/431.4 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m289.9/289.9 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m110.7/110.7 kB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.8/6.8 MB\u001b[0m \u001b[31m17.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.8/42.8 MB\u001b[0m \u001b[31m44.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('en_core_web_md')\n","\u001b[38;5;3m⚠ Restart to reload dependencies\u001b[0m\n","If you are in a Jupyter or Colab notebook, you may need to restart Python in\n","order to load all the package's dependencies. You can do this by selecting the\n","'Restart kernel' or 'Restart runtime' option.\n"]}],"source":["import os\n","\n","# importing zipfile for data reading with zip file.\n","import zipfile\n","\n","import re\n","\n","\n","\n","import importlib.util\n","\n","def is_module_installed(module_name):\n","    spec = importlib.util.find_spec(module_name)\n","    return spec is not None\n","\n","# 定义需要检查的模块列表\n","modules_to_check = ['pyLDAvis', 'gensim', 'spacy', 'matplotlib', 'seaborn','emoji','contractions',\n","                    'pyspellchecker','wordcloud'\n","                    ]\n","\n","# 遍历模块列表，检查并安装未安装的模块\n","for module_name in modules_to_check:\n","    if not is_module_installed(module_name):\n","        !pip install {module_name} -qq\n","\n","\n","# 额外处理 spacy 模块，下载语言模型\n","if 'spacy' in modules_to_check and not is_module_installed('en_core_web_md'):\n","    !python -m spacy download en_core_web_md -qq\n","\n","from wordcloud import WordCloud\n","\n","from nltk.tokenize import word_tokenize\n","from nltk.stem import WordNetLemmatizer\n","from nltk.corpus import stopwords\n","from spacy.lang.en.stop_words  import STOP_WORDS as SPACY_STROP_WORDS\n","from sklearn.feature_extraction import text as sklearn_text\n","\n","\n","\n","\n","# importing CountVectorizer for feature extraction\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","# Importing data manipulation libraries\n","import numpy as np\n","import pandas as pd\n","\n","# importing tqdm and display modules for progress meters/bars\n","from IPython.display import display\n","from tqdm import tqdm\n","\n","# importing wordcloud to represent topics wordcloud\n","from wordcloud import WordCloud\n","\n","# Model selection modules\n","from sklearn.model_selection import train_test_split, KFold\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","from collections import Counter\n","\n","import ast\n","\n","# importing data visualization modules\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.manifold import TSNE\n","\n","# importing mlab for implementing MATLAB functions\n","import matplotlib.mlab as mlab\n","\n","# importing statistics module\n","import scipy.stats as stats\n","\n","# importing decomposition modules\n","from sklearn.decomposition import TruncatedSVD\n","from sklearn.decomposition import LatentDirichletAllocation\n","\n","# importing Natural Language Toolkit and other NLP modules\n","import nltk\n","from nltk.stem import WordNetLemmatizer\n","from textblob import TextBlob, Word\n","\n","# Importing warnings library. The warnings module handles warnings in Python.\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","\n","import emoji\n","\n","# Import\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","sns.set()\n","import spacy\n","import pyLDAvis.gensim_models\n","pyLDAvis.enable_notebook()# Visualise inside a notebook\n","import en_core_web_md\n","from gensim.corpora.dictionary import Dictionary\n","from gensim.models import LdaMulticore\n","from gensim.models import CoherenceModel"]},{"cell_type":"markdown","source":["**1.1 read xml, extract meta data.**"],"metadata":{"id":"on5AVdbaIK8u"}},{"cell_type":"code","source":["# The variable \"zipFile\" is location of AssignmentBlogData.zip\n","\n","zipFile = '/content/drive/textMining/Assignment2BlogData.zip'\n","\n","if run_local != 1:\n","  zipFile = '/content/drive/MyDrive/Colab Notebooks/COMP814Data/AssignmentBlogData.zip'\n","\n","# Create dataframe for gathering the articles\n","blogs = pd.DataFrame()\n","\n","\n","temp_data = []\n","with zipfile.ZipFile(zipFile, \"r\") as z:\n","  count = 1\n","  #literate the file content by filename\n","  for filename in z.namelist(): #namelist() get filename list\n","    with z.open(filename) as f:\n","      if not filename.endswith('.xml'):\n","          continue\n","\n","      xml_content_bytes = f.read()\n","      xml_content = \"\"\n","      xml_content = xml_content_bytes.decode('latin-1')\n","\n","      #extract the content from the tag\n","      dates = re.findall(r'<date>(.*?)</date>', xml_content, re.DOTALL)\n","      posts = re.findall(r'<post>(.*?)</post>', xml_content, re.DOTALL)\n","\n","      if len(dates) != len(posts):\n","          print(filename, \"has an error structure, date count does not equal posts count, please check it\")\n","          continue\n","\n","      filename2= filename.split('/')[1];\n","      # Iterate over the range of dates and posts\n","      for i in range(len(dates)):\n","        try:\n","          post_content = posts[i].encode('utf-8').decode('utf-8')  # Re-encode and decode to ensure UTF-8\n","        except UnicodeDecodeError:\n","          print(f\"Error re-encoding post in {filename}. Skipping this post.\")\n","          continue\n","        # Create a dictionary for the row to be added\n","        row = {\n","              'Filename': filename2,\n","              'Date': dates[i],\n","              'Contents': post_content,\n","              'BlogUserID': filename2.split('.')[0],\n","              'Gender': filename2.split('.')[1],\n","              'Age': filename2.split('.')[2],\n","              'Tag': filename2.split('.')[3],\n","              'zodiac': filename2.split('.')[4],\n","              'Males': 1 if filename2.split('.')[1].lower() == 'male' else 0 ,\n","              'Females': 1 if  filename2.split('.')[1].lower() == 'female' else 0 ,\n","              'Age_Under_21': 1 if int(filename2.split('.')[2]) <= 20 else 0 ,\n","              'Age_Over_20': 1 if int(filename2.split('.')[2]) > 20 else 0 ,\n","              'Students': 1 if filename2.split('.')[3].lower() == 'student' else 0 ,\n","              'Everyone': 1\n","\n","                }\n","        temp_data.append(row)\n","        count += 1\n","\n","      if count > 10000000: #switch for test\n","        break;\n","\n","\n","blogs = pd.concat([blogs, pd.DataFrame(temp_data)], ignore_index=True)\n","\n"],"metadata":{"id":"UjmUl6Wk-0O1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267623129,"user_tz":-720,"elapsed":20782,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"af447684-186d-4ea2-eba0-77d26b4c117b"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["*The dataset contains .....*"],"metadata":{"id":"O4tdaIZ6ORmj"}},{"cell_type":"code","source":["blogs.sample(5)"],"metadata":{"id":"FGSOdM5f-0MT","colab":{"base_uri":"https://localhost:8080/","height":608},"executionInfo":{"status":"ok","timestamp":1716267623129,"user_tz":-720,"elapsed":16,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"232ee01b-25f9-4a79-ddd6-637aecd8c447"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                Filename              Date  \\\n","171076         2079968.female.17.Student.Sagittarius.xml  24,December,2003   \n","360227            3401929.female.14.Education.Pisces.xml       26,May,2004   \n","591420                   515680.male.23.indUnk.Virgo.xml   10,October,2003   \n","300641  3136900.male.27.Communications-Media.Scorpio.xml    04,August,2004   \n","679324            988941.female.17.Student.Capricorn.xml  24,December,2003   \n","\n","                                                 Contents BlogUserID  Gender  \\\n","171076  \\r\\n\\r\\n\\t \\r\\n      I am seriously craving a ...    2079968  female   \n","360227  \\r\\n\\r\\n     \\r\\n      Last night I was scared...    3401929  female   \n","591420  \\r\\n\\r\\n\\r\\n           \\r\\n      My pictures a...     515680    male   \n","300641  \\r\\n\\r\\n\\t \\r\\n      GOPers in Oregon are worr...    3136900    male   \n","679324  \\r\\n\\r\\n    \\r\\n       Groovy. Start on Monday...     988941  female   \n","\n","       Age                   Tag       zodiac  Males  Females  Age_Under_21  \\\n","171076  17               Student  Sagittarius      0        1             1   \n","360227  14             Education       Pisces      0        1             1   \n","591420  23                indUnk        Virgo      1        0             0   \n","300641  27  Communications-Media      Scorpio      1        0             0   \n","679324  17               Student    Capricorn      0        1             1   \n","\n","        Age_Over_20  Students  Everyone  \n","171076            0         1         1  \n","360227            0         0         1  \n","591420            1         0         1  \n","300641            1         0         1  \n","679324            0         1         1  "],"text/html":["\n","  <div id=\"df-7ad97cc7-b6a5-4222-87e9-54ae7afb83b0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Filename</th>\n","      <th>Date</th>\n","      <th>Contents</th>\n","      <th>BlogUserID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Tag</th>\n","      <th>zodiac</th>\n","      <th>Males</th>\n","      <th>Females</th>\n","      <th>Age_Under_21</th>\n","      <th>Age_Over_20</th>\n","      <th>Students</th>\n","      <th>Everyone</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>171076</th>\n","      <td>2079968.female.17.Student.Sagittarius.xml</td>\n","      <td>24,December,2003</td>\n","      <td>\\r\\n\\r\\n\\t \\r\\n      I am seriously craving a ...</td>\n","      <td>2079968</td>\n","      <td>female</td>\n","      <td>17</td>\n","      <td>Student</td>\n","      <td>Sagittarius</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>360227</th>\n","      <td>3401929.female.14.Education.Pisces.xml</td>\n","      <td>26,May,2004</td>\n","      <td>\\r\\n\\r\\n     \\r\\n      Last night I was scared...</td>\n","      <td>3401929</td>\n","      <td>female</td>\n","      <td>14</td>\n","      <td>Education</td>\n","      <td>Pisces</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>591420</th>\n","      <td>515680.male.23.indUnk.Virgo.xml</td>\n","      <td>10,October,2003</td>\n","      <td>\\r\\n\\r\\n\\r\\n           \\r\\n      My pictures a...</td>\n","      <td>515680</td>\n","      <td>male</td>\n","      <td>23</td>\n","      <td>indUnk</td>\n","      <td>Virgo</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>300641</th>\n","      <td>3136900.male.27.Communications-Media.Scorpio.xml</td>\n","      <td>04,August,2004</td>\n","      <td>\\r\\n\\r\\n\\t \\r\\n      GOPers in Oregon are worr...</td>\n","      <td>3136900</td>\n","      <td>male</td>\n","      <td>27</td>\n","      <td>Communications-Media</td>\n","      <td>Scorpio</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>679324</th>\n","      <td>988941.female.17.Student.Capricorn.xml</td>\n","      <td>24,December,2003</td>\n","      <td>\\r\\n\\r\\n    \\r\\n       Groovy. Start on Monday...</td>\n","      <td>988941</td>\n","      <td>female</td>\n","      <td>17</td>\n","      <td>Student</td>\n","      <td>Capricorn</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ad97cc7-b6a5-4222-87e9-54ae7afb83b0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7ad97cc7-b6a5-4222-87e9-54ae7afb83b0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7ad97cc7-b6a5-4222-87e9-54ae7afb83b0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ce1173ee-789a-48a3-919e-03b7feaed2d2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce1173ee-789a-48a3-919e-03b7feaed2d2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ce1173ee-789a-48a3-919e-03b7feaed2d2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","repr_error":"0"}},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["##### **The dataset consists of 4 columns:**\n","\n","* *Index : Entry number*\n","\n","* *Filename: The name of the XML file from which the blog post was extracted.*\n","* *Date: The date on which the blog post was published.*\n","* *Contents: The actual content of the blog post.*\n","* *BlogUserID: A unique identifier for the blog user, extracted from the filename.*\n","* *Gender: The gender of the blog user, extracted from the filename.*\n","* *Age: The age of the blog user, extracted from the filename.*\n","* *Tag: A tag describing the blog user, often their occupation or role, extracted from the filename.*\n","* *Zodiac: The zodiac sign of the blog user, extracted from the filename.*\n","* *Males: A binary indicator (1 or 0) denoting whether the blog user is male.*\n","* *Females: A binary indicator (1 or 0) denoting whether the blog user is female.*\n","* *Age_Under_21: A binary indicator (1 or 0) denoting whether the blog user is 20 years old or younger.*\n","* *Age_Over_20: A binary indicator (1 or 0) denoting whether the blog user is older than 20 years.*\n","* *Students: A binary indicator (1 or 0) denoting whether the blog user is a student.*\n","* *Everyone: A binary indicator that is always 1, indicating that this row should be considered in aggregate analyses involving all users.*"],"metadata":{"id":"kVDAOZBfOkQV"}},{"cell_type":"code","source":["blogs.shape"],"metadata":{"id":"Qc9cd5Vh-0J3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267623129,"user_tz":-720,"elapsed":6,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"8aa5c97c-cf42-4467-8527-352d00ef15fd"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["(681288, 14)"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":[" **1.2 Check the number of files in each of the demography to be analysed for this\n","assignment.**"],"metadata":{"id":"CHjwWUw4-47M"}},{"cell_type":"code","source":["\n","# Count unique files in each category\n","unique_files = blogs.drop_duplicates(subset='Filename')\n","\n","category_counts = {\n","    'Males': unique_files[unique_files['Males'] == 1]['Filename'].nunique(),\n","    'Females': unique_files[unique_files['Females'] == 1]['Filename'].nunique(),\n","    'Age_Under_21': unique_files[unique_files['Age_Under_21'] == 1]['Filename'].nunique(),\n","    'Age_Over_20': unique_files[unique_files['Age_Over_20'] == 1]['Filename'].nunique(),\n","    'Students': unique_files[unique_files['Students'] == 1]['Filename'].nunique(),\n","    'Everyone': unique_files['Filename'].nunique()\n","}\n","\n","# Print the counts\n","print(\"File counts in each category:\")\n","for category, count in category_counts.items():\n","    print(f\"{category}: {count}\")"],"metadata":{"id":"QnkRjvFerWva","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267623129,"user_tz":-720,"elapsed":5,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"7e5ceae0-c002-492f-b490-2468a357b046"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["File counts in each category:\n","Males: 9660\n","Females: 9660\n","Age_Under_21: 8240\n","Age_Over_20: 11080\n","Students: 5120\n","Everyone: 19320\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["**1.3 Check duplicated documents**"],"metadata":{"id":"Wc9SGgkP27PD"}},{"cell_type":"code","source":["blogs.duplicated(subset = ['Contents']).sum()"],"metadata":{"id":"QAXqmaAP-0HX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267623918,"user_tz":-720,"elapsed":346,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"f9551bcc-6bb6-48f8-b9ce-6f7a0143384f"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["69221"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["\n","blogs.duplicated(subset=['BlogUserID', 'Contents']).sum()"],"metadata":{"id":"0nXMLjK-5P5-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267626117,"user_tz":-720,"elapsed":2201,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"78958573-1bee-41f1-c454-1eb90eedf8b3"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["6921"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["duplicate_posts = blogs[blogs.duplicated(subset='Contents', keep=False)]  # keep=False to mark all duplicates\n","\n","\n","# Sort the DataFrame by 'Contents' where duplicates are found\n","duplicate_posts = duplicate_posts.sort_values(by='Contents')\n","\n","#set the display.max_colwidth option to a large value or to None to display the full text of each column:\n","#pd.set_option('display.max_colwidth', None)\n","pd.set_option('display.max_colwidth', 200)\n","\n","# Display only the first 10 duplicates\n","print(duplicate_posts[['BlogUserID', 'Contents']].head(10))\n"],"metadata":{"id":"4f-6bHZNtpGf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267626791,"user_tz":-720,"elapsed":676,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"cace0826-1f30-429e-c37e-7bed2618f23e"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["       BlogUserID  \\\n","270951    2970791   \n","270935    2970791   \n","270933    2970791   \n","270949    2970791   \n","270928    2970791   \n","270944    2970791   \n","270932    2970791   \n","270948    2970791   \n","270927    2970791   \n","270943    2970791   \n","\n","                                                                                                                                                                                                       Contents  \n","270951  \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \"On Friday [May, 14,] Oscar-winning actress Gwyneth Paltrow gave birth to a baby girl named Apple Blythe...  \n","270935  \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \"On Friday [May, 14,] Oscar-winning actress Gwyneth Paltrow gave birth to a baby girl named Apple Blythe...  \n","270933  \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t Cimmie, I completely agree with you, the dinosaurs became extinct because they \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t be...  \n","270949  \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t Cimmie, I completely agree with you, the dinosaurs became extinct because they \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t be...  \n","270928  \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t  T he hottest person in the world, cooler than utada and meg. \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\" O h my gosh, i wish i went to school with him.\"  \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tThe phrase that's sa...  \n","270944  \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t  T he hottest person in the world, cooler than utada and meg. \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\" O h my gosh, i wish i went to school with him.\"  \\r\\n\\t\\t\\t\\t\\t\\t\\t\\tThe phrase that's sa...  \n","270932  \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t \"The young captain [Pieter] of Gondor [Grellow] has but to extend his hand to take the ring for his own and the world will fall. He is close now, so close to achieving his g...  \n","270948  \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t \"The young captain [Pieter] of Gondor [Grellow] has but to extend his hand to take the ring for his own and the world will fall. He is close now, so close to achieving his g...  \n","270927  \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t 1.) Chris Martin \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t2.) TOM FELTON! \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t3.) Kate Beckinsale \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t4.) Melanie Chisolm \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t5.) Melanie Brown \\r...  \n","270943  \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t 1.) Chris Martin \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t2.) TOM FELTON! \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t3.) Kate Beckinsale \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t4.) Melanie Chisolm \\r\\n\\t\\t\\t\\t\\t\\t\\t\\t5.) Melanie Brown \\r...  \n"]}]},{"cell_type":"markdown","source":["**Remove duplicated blogs**"],"metadata":{"id":"mvJ21r9xfydU"}},{"cell_type":"code","source":["#need to confirm with professor, why data is duplicated, and can I drop them?\n","\n","blogs.drop_duplicates(subset = ['Contents'],inplace = True)\n"],"metadata":{"id":"52-ONs30-0Ev","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267626791,"user_tz":-720,"elapsed":2,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"cb0784fd-2d81-4b53-bafa-0f25410d6c64"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["*Checking the number of Article per categories:*"],"metadata":{"id":"acoW2ujzfk1i"}},{"cell_type":"markdown","source":["**1.4 Text Length Check**"],"metadata":{"id":"SZgj6W1GmUat"}},{"cell_type":"code","source":["blogs['Contents_len'] = blogs['Contents'].str.len()"],"metadata":{"id":"yOOZ9hzzfC7p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267627134,"user_tz":-720,"elapsed":344,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"ccfff361-c8dc-453f-f21d-f4f9232f50b8"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["\n","# Output the row with the maximum value in 'Contents_len'\n","max_length_row = blogs.loc[blogs['Contents_len'].idxmax()]\n","\n","print(max_length_row)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zif3CMpJa_Wf","executionInfo":{"status":"ok","timestamp":1716267627135,"user_tz":-720,"elapsed":3,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"806cde3f-5c48-4183-ad7c-2193bd41882d"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Filename                                                                                                                                                                          3163832.female.41.indUnk.Aquarius.xml\n","Date                                                                                                                                                                                                       21,July,2004\n","Contents        \\r\\n\\r\\n\\t \\r\\n      Excerpts from the HRW report:  [prologue] A Petition  In the Name of God, the Merciful, the Compassionate   The Venerable Chief and Leader, the Honorable Saddam Hussein (May G...\n","BlogUserID                                                                                                                                                                                                      3163832\n","Gender                                                                                                                                                                                                           female\n","Age                                                                                                                                                                                                                  41\n","Tag                                                                                                                                                                                                              indUnk\n","zodiac                                                                                                                                                                                                         Aquarius\n","Males                                                                                                                                                                                                                 0\n","Females                                                                                                                                                                                                               1\n","Age_Under_21                                                                                                                                                                                                          0\n","Age_Over_20                                                                                                                                                                                                           1\n","Students                                                                                                                                                                                                              0\n","Everyone                                                                                                                                                                                                              1\n","Contents_len                                                                                                                                                                                                     790204\n","Name: 304594, dtype: object\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(15, 5))\n","sns.distplot(blogs['Contents_len']).set_title('Blogs length distribution');"],"metadata":{"id":"-cQMOjWNlgPy","colab":{"base_uri":"https://localhost:8080/","height":500},"executionInfo":{"status":"ok","timestamp":1716267630733,"user_tz":-720,"elapsed":3278,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"6190f18c-314f-4596-b515-7d392426190b"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Dist plot for each category\n","# Prepare the data by melting the category columns into a single column\n","category_columns = ['Males', 'Females', 'Age_Under_21', 'Age_Over_20', 'Students', 'Everyone']\n","blogs_melted = pd.melt(blogs, id_vars=['Contents_len'], value_vars=category_columns,\n","                       var_name='Category', value_name='Value')\n","\n","# Filter out rows where the category flag is 0\n","blogs_melted = blogs_melted[blogs_melted['Value'] == 1]\n","\n","sns.displot(blogs_melted, x=\"Contents_len\", hue=\"Category\", kind=\"kde\",height=7,aspect =1 )"],"metadata":{"id":"LE-hvsLUnHDV","colab":{"base_uri":"https://localhost:8080/","height":773},"executionInfo":{"status":"ok","timestamp":1716267641687,"user_tz":-720,"elapsed":10957,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"236d3a13-63d1-476e-985a-566a24e92736"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7e2baebb0220>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"text/plain":["<Figure size 865.625x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["*Here we can see the content length distribution for each categories.*"],"metadata":{"id":"lRUrCBWvvp19"}},{"cell_type":"code","source":["#Dist plot for each category\n","# Prepare the data by melting the category columns into a single column\n","category_columns = ['Males', 'Females', 'Age_Under_21', 'Age_Over_20', 'Students', 'Everyone']\n","blogs_melted = pd.melt(blogs, id_vars=['Contents_len'], value_vars=category_columns,\n","                       var_name='Category', value_name='Value')\n","\n","# Filter out rows where the category flag is 0\n","blogs_melted = blogs_melted[blogs_melted['Value'] == 1]\n","\n","sns.displot(blogs_melted, x=\"Contents_len\", hue=\"Category\", kind=\"kde\",height=7,aspect =1 )"],"metadata":{"id":"IS8exKID-_fB","colab":{"base_uri":"https://localhost:8080/","height":773},"executionInfo":{"status":"ok","timestamp":1716267651988,"user_tz":-720,"elapsed":10313,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"91363942-6235-4263-fa8e-6bcb61902a8a"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7e2bac0cf910>"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 865.625x700 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA1sAAAKsCAYAAAAa3KcQAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACGmUlEQVR4nOzdd3gU1f7H8c9uGjWhBZSmwI8EAoRQBEInNFEQRQUEKYIIUlQUFRRErqKAelUC0pvYEAvSLSCgYMdy9aqXohBAaQkkIYSUnd8fmE2GDRCSbHZ28349j092Z87MnP0mQT6cM2dshmEYAgAAAAAUKrunOwAAAAAAvoiwBQAAAABuQNgCAAAAADcgbAEAAACAGxC2AAAAAMANCFsAAAAA4AaELQAAAABwA8IWAAAAALgBYQsAAAAA3ICwlQcHDhzQE088od69eysiIkI9e/YssmvHxsYqPDzc5b8333yzyPoAAAAA4Mr5e7oD3mDPnj3avn27GjduLIfDIcMwivT6JUqU0IoVK0zbatSoUaR9AAAAAHBlCFt5EBMToy5dukiSJk6cqJ9//rlIr2+32xUVFVWk1wQAAABQMEwjzAO7/fJlMgxDS5YsUffu3dWwYUN17txZy5cvd3/nAAAAAFgSI1uFZPr06Vq9erVGjRqlxo0ba/fu3Xr++ecVFBSkO+64o0DnTk1NVatWrZSYmKhrr71WQ4cOVd++fQup5wAAAADcgbBVCA4ePKjXXntN06ZNU79+/SRJrVu3VmpqqubOnat+/frlaXQsNzVr1tSECRMUERGhc+fOad26dZoyZYqSkpI0fPjwwvwYAAAAAAoRYasQ7Nq1S5LUrVs3ZWRkOLe3bt1aixYt0l9//aVq1arp7NmzOnLkyGXPd/XVV6tUqVKSpN69e5v2dezYUenp6Zo3b54GDx6sgICAQvwkAAAAAAoLYasQJCQkyDAMtWrVKtf9WWHr+++/11133XXZ8y1atEjt27e/6P4ePXroww8/1MGDB1WnTp189xsAAACA+xC2CkFISIhsNpveeOONXEeaatWqJen8SNfvv/9e1N0DAAAA4AGErUIQHR0tSTp16pRiYmLcfr2NGzcqODhYNWvWdPu1AAAAAOQPYSsPzp49q+3bt0uSDh8+rOTkZG3evFmS1KJFC9WqVUsDBw7UI488ouHDh6tx48ZKT0/Xn3/+qa+++kqvvPJKvq/dp08f3Xzzzapdu7ZSU1O1bt06ffTRR3rssce4XwsAAACwMJthGIanO2F1hw4dUufOnXPd9+qrr6ply5YyDEOvv/66Vq1apT/++EOlS5dWrVq1dP3112vo0KH5vvYDDzygn376SSdOnJDNZlNYWJgGDRqkm266Kd/nBAAAAOB+hC0AAAAAcIP8PfwJAAAAAHBJhC0AAAAAcAPCFgAAAAC4AasRXkJmpkPx8Wfcfh273aYKFUorPv6MHA5uoaMe2ahFNmphRj2yUQsz6pGNWpi5ox6hoWUL5TyAr2JkywLsdptsNpvsdpunu2IJ1CMbtchGLcyoRzZqYUY9slELM+oBFD3CFgAAAAC4AWELAAAAANzAUmFr+/btuvPOO9WqVSs1bNhQnTt31rPPPqukpKTLHrt69Wp1795djRo10k033aRPP/20CHoMAAAAALmz1AIZp06dUmRkpAYNGqRy5cppz549io2N1Z49e7R06dKLHrdhwwZNmTJFo0aNUqtWrbRx40aNHTtWr7/+uqKiooruAwAAAADAPywVtnr37m1637JlSwUGBmrKlCk6evSoqlSpkutxs2fP1o033qgHHnhAktSqVSv973//09y5c7Vo0SJ3dxsAAAAAXFhqGmFuypUrJ0lKT0/PdX9cXJz+/PNP9ejRw7T9hhtu0BdffKG0tDR3dxEAAAAAXFgybGVmZurcuXP65ZdfNHfuXMXExKh69eq5tt2/f78kqVatWqbtderUUXp6uuLi4tzeXwAAAAC4kKWmEWbp1KmTjh49Kklq166dXnjhhYu2PX36tCQpODjYtD3rfdb+/PL3d38e9fOzm74Wd9QjG7XIRi3MqEc2amFGPbJRCzPqARQ9S4athQsX6uzZs9q7d6/mzZunUaNGadmyZfLz8yvSftjtNpUvX7rIrhccXLLIruUNqEc2apGNWphRj2zUwox6ZKMWZtQDKDqWDFv16tWTJDVp0kSNGjVS79699fHHH+v66693aRsSEiJJSkpKUmhoqHN7YmKiaX9+OByGEhNT8n18Xvn52RUcXFKJiWeVmelw+/WsjnpkoxbZqIUZ9chGLcyoRzZqYeaOehTlP0oD3siSYSun8PBwBQQE6ODBg7nur127tqTz925lvc56HxAQoBo1ahTo+hkZRfeHc2amo0ivZ3XUIxu1yEYtzKhHNmphRj2yUQsz6gEUHctP2v3xxx+Vnp5+0QUyatSooWuvvVabN282bd+4caOio6MVGBhYFN0EAAAAABNLjWyNHTtWDRs2VHh4uEqUKKHffvtNS5YsUXh4uLp06SJJeuyxx7RmzRr997//dR43btw4TZgwQTVr1lTLli21ceNG/fTTT3rttdc89VEAAAAAFHOWCluRkZHauHGjFi5cKMMwVK1aNd1+++0aPny4c4TK4XAoMzPTdFzPnj119uxZLVq0SAsXLlStWrU0Z84cNWnSxBMfAwAAAABkMwzD8HQnrCoz06H4+DNuv46/v13ly5dWQsIZ5lCLeuRELbJRCzPqkY1amFGPbNTCzB31CA0tWyjnAXyV5e/ZAgAAAABvRNgCAAAAADcgbAEAAACAGxC2AAAAAMANCFsAAAAA4AaELQAAAABwA8IWAAAAALgBYQsAAAAA3ICwBQAAAABuQNgCAAAAADcgbFnE/sOntevnvz3dDQAAAACFhLBlES+9tVvz1/ysv06e8XRXAAAAABQCwpZFnEnNkCSl/PMVAAAAgHcjbFmFYXi6BwAAAAAKEWHLIowLvgIAAADwboQtqyFtAQAAAD6BsGURWbMIDdIWAAAA4BMIW1bBPVsAAACATyFsWQyZCwAAAPANhC2LIGMBAAAAvoWwZRHOe7YY2gIAAAB8AmELAAAAANyAsGUZjGgBAAAAvoSwZTHMIgQAAAB8A2HLIrKfswUAAADAFxC2LIKQBQAAAPgWwpbVMI8QAAAA8AmELatgGiEAAADgUwhbFmH8E7MIWwAAAIBvIGxZDWkLAAAA8AmELYvgVi0AAADAtxC2LCJ76XdSFwAAAOALCFtWQ9YCAAAAfAJhyzJYIAMAAADwJYQtAAAAAHADwpZFOO/ZYmgLAAAA8AmELYswcnkFAAAAwHsRtiyGkS0AAADANxC2rIKUBQAAAPgUwpZFGBd8BQAAAODdCFtWQ9oCAAAAfAJhyyKcqxGStgAAAACfQNiyDEIWAAAA4EsIW1ZD5gIAAAB8AmHLIrKnEQIAAADwBYQti2EFeAAAAMA3ELYsgowFAAAA+BbClkVkj2gRuwAAAABfQNiyGKYRAgAAAL6BsGUVpCwAAADApxC2LIKoBQAAAPgWwpbFELoAAAAA30DYsgjnc7aYTggAAAD4BMKWZRCyAAAAAF9C2LIYBrYAAAAA30DYsghCFgAAAOBbCFsWYzCdEAAAAPAJhC2LMFxeAAAAAPBmhC2r+GceIVkLAAAA8A2ELQAAAABwA8KWRTCNEAAAAPAthC2LcD7UmLQFAAAA+ATClsWwBDwAAADgGwhbAAAAAOAGhC0LMBjOAgAAAHwOYctiyF0AAACAbyBsWYBhek3aAgAAAHwBYQsAAAAA3ICwZQXGRV4DAAAA8FqELQvIOXWQrAUAAAD4BsIWAAAAALgBYcsCWIEQAAAA8D2ELYvhmVsAAACAbyBsWQxRCwAAAPANhC0LMFiNEAAAAPA5hC0L4EHGAAAAgO8hbFkMsQsAAADwDYQtKzBNIyRuAQAAAL6AsGUxRC0AAADANxC2LICBLQAAAMD3ELasgIAFAAAA+BzCFgAAAAC4AWHLAnIu/W4wjxAAAADwCYQtC8iZr4haAAAAgG8gbAEAAACAG/h7ugM5bdq0SWvXrtUvv/yixMREXXPNNRo0aJBuvfVW2Wy2ix4XExOjw4cPu2z/6aefFBQU5M4uFz6GtgAAAACfYKmwtXz5clWrVk0TJ05U+fLltWvXLk2ZMkV///23xo4de8lju3fvrmHDhpm2BQYGurO7hYZphAAAAIDvsVTYmjdvnipUqOB8Hx0drVOnTmnZsmUaPXq07PaLz3qsVKmSoqKiiqCXbsYCGQAAAIBPsNQ9WzmDVpb69esrOTlZKSkpHuhR0TAYzwIAAAB8jqXCVm6+++47ValSRWXKlLlku3Xr1qlhw4Zq0qSJRowYod9//72Ieli4iF0AAACAb7DUNMILffvtt9q4caMeffTRS7aLiYlRZGSkqlatqri4OM2fP18DBgzQmjVrVKNGjQL1wd/f/Xk0w5Edsex2W5Fc08r8/Oymr8UZtchGLcyoRzZqYUY9slELM+oBFD2bYdGn6P7999+6/fbbVadOHS1duvSS92td6NixY+rRo4d69eqlJ598Mt99MAzjkqsgFpaklDQNmLJJknRXzwbq0+n/3H5NAAAAAO5lyZGtxMREjRgxQuXKlVNsbOwVBS1Jqly5spo1a6ZffvmlQP1wOAwlJrr/XrGzaZnZr8+mKSHhjNuvaWV+fnYFB5dUYuJZZWY6PN0dj6IW2aiFGfXIRi3MqEc2amHmjnqUL1+6UM4D+CrLha3U1FSNHDlSSUlJWrVqlcqWLevR/mRkuP8P54yM7LCV6XAUyTW9QWYmtchCLbJRCzPqkY1amFGPbNTCjHoARcdSk3YzMjL0wAMPaP/+/Vq8eLGqVKmSr/McPXpU3333nRo1alTIPSwClpzUCQAAAOBKWWpka9q0afr00081ceJEJScn64cffnDui4iIUGBgoIYMGaIjR47o448/liStX79en376qTp06KDKlSsrLi5OCxculJ+fn+666y4PfZL8I2sBAAAAvsFSYWvnzp2SpBkzZrjs27Jli6pXry6Hw6HMzOxpd9WrV9exY8f0zDPPKCkpSWXLllWrVq103333FXglwqJizSVKAAAAABSEpcLW1q1bL9tm5cqVpvdRUVEu27yZRReHBAAAAHCFLHXPFgAAAAD4CsKWBeQczWJgCwAAAPANhC0AAAAAcAPClgUYF3kNAAAAwHsRtqzAlLaIWwAAAIAvIGxZDFELAAAA8A2ELQswLvoGAAAAgLcibFkAz9YCAAAAfA9hy2KIXQAAAIBvIGxZDKNcAAAAgG8gbFkA+QoAAADwPYQtAAAAAHADwpYF8JgtAAAAwPcQtiyGrAUAAAD4BsKWFZiGs4hbAAAAgC8gbFkA8QoAAADwPYQti+GeLQAAAMA3ELasgIAFAAAA+BzClgUYOdIWI1sAAACAbyBsAQAAAIAbELYsIOdolsGcQgAAAMAnELashqwFAAAA+ATClsWQtQAAAADfQNiyAAIWAAAA4HsIW1ZD8gIAAAB8AmHLAowcK2SwQAYAAADgGwhbFsNztgAAAADfQNgCAAAAADcgbFkAo1kAAACA7yFsWUDOrEXwAgAAAHwDYctiWCADAAAA8A2ELStgOAsAAADwOYQtCzAu+gYAAACAtyJsWQxZCwAAAPANhC0rMC7yGgAAAIDXImxZDAtkAAAAAL6BsGUBxCsAAADA9xC2LMDIsRohwQsAAADwDYQtqyFtAQAAAD6BsGUxZC0AAADANxC2LIBnGgMAAAC+h7BlNSQvAAAAwCcQtiwg53LvRC0AAADANxC2rCBHwmJgCwAAAPANhC0AAAAAcAPClgUYl3gHAAAAwDsRtiyGaYQAAACAbyBsWUDOgEXWAgAAAHwDYcsSiFgAAACAryFsWQ25CwAAAPAJhC0LME8jJG0BAAAAvoCwZTVkLQAAAMAnELYAAAAAwA0IWxbAaoQAAACA7yFsWUDO+7R4zhYAAADgGwhblkPaAgAAAHwBYcsKyFcAAACAzyFsWQy5CwAAAPANhC0LMC76BgAAAIC3ImxZAKsRAgAAAL6HsGUxBssRAgAAAD6BsGUJBCwAAADA1xC2LIDBLAAAAMD3ELYshuAFAAAA+AbClsWQtQAAAADfQNiyABbFAAAAAHwPYctqCF4AAACATyBsWYBxkdcAAAAAvBdhy2pIWwAAAIBPIGxZAQELAAAA8DmELQtgGiEAAADgewhbFsPKhAAAAIBvIGxZAAELAAAA8D2ELQAAAABwA8KWxTDIBQAAAPgGwpYFELAAAAAA30PYsgDTaoQkLwAAAMAnELYAAAAAwA0IW5Zg5PIKAAAAgDcjbAEAAACAGxC2LCDnbVrcsgUAAAD4BsIWAAAAALgBYctiDO7aAgAAAHwCYcsCTFMHyVoAAACAT7BU2Nq0aZPuvfdetW/fXlFRUerdu7feeeedyz57yjAMLVy4UB07dlRkZKT69eunH374oWg6XQgMViMEAAAAfI6lwtby5ctVsmRJTZw4UfPmzVP79u01ZcoUzZ0795LHLVq0SLNnz9bQoUO1YMEChYaGatiwYYqLiyuinhciVsgAAAAAfIK/pzuQ07x581ShQgXn++joaJ06dUrLli3T6NGjZbe7ZsNz585pwYIFGjZsmIYOHSpJatasma6//notWbJETz75ZBH1vgDIVwAAAIDPsdTIVs6glaV+/fpKTk5WSkpKrsfs3r1bycnJ6tGjh3NbYGCgunbtqh07dritr4WJW7YAAAAA32OpsJWb7777TlWqVFGZMmVy3b9//35JUu3atU3b69SpoyNHjig1NdXtfSxMzCIEAAAAfIOlphFe6Ntvv9XGjRv16KOPXrRNYmKiAgMDFRQUZNoeHBwswzB0+vRplShRIt998Pd3fx612Ww5XhfNNa3Mz89u+lqcUYts1MKMemSjFmbUIxu1MKMeQNGzbNj6+++/NX78eLVs2VKDBw/2SB/sdpvKly/t9uuUKpXofO3v71ck1/QGwcElPd0Fy6AW2aiFGfXIRi3MqEc2amFGPYCiY8mwlZiYqBEjRqhcuXKKjY3NdWGMLMHBwUpLS9O5c+dMo1uJiYmy2WwKCQnJdz8cDkOJibnfK1aYUlLSnK/T0zOVkHDG7de0Mj8/u4KDSyox8awyMx2e7o5HUYts1MKMemSjFmbUIxu1MHNHPfgHYuDSLBe2UlNTNXLkSCUlJWnVqlUqW7bsJdtn3av1xx9/qF69es7t+/fvV9WqVQs0hVCSMjLc/4dzzj/wDMMokmt6g8xMB7X4B7XIRi3MqEc2amFGPbJRCzPqARQdS03azcjI0AMPPKD9+/dr8eLFqlKlymWPadq0qcqUKaNNmzY5t6Wnp+ujjz5S+/bt3dldt2CBDAAAAMA3WGpka9q0afr00081ceJEJScn64cffnDui4iIUGBgoIYMGaIjR47o448/liQFBQVp5MiRio2NVYUKFRQWFqY333xTp06d0vDhwz30Sa4M+QoAAADwPZYKWzt37pQkzZgxw2Xfli1bVL16dTkcDmVmZpr2jRgxQoZhaOnSpYqPj1f9+vW1ZMkS1ahRo0j6XWA5hrMIXgAAAIBvsFTY2rp162XbrFy50mWbzWbTyJEjNXLkSHd0q2gxjxAAAADwCZa6Z6u4Mi7yGgAAAID3ImxZAQkLAAAA8DmELYshdwEAAAC+gbBlAcZF3wAAAADwVoQtizFIWwAAAIBPIGxZgMEKhAAAAIDPIWxZDbkLAAAA8AmELYshawEAAAC+gbBlATlnETKjEAAAAPANhC0LIF8BAAAAvoewZTlELwAAAMAXELasIMfcQaYRAgAAAL6BsGUBxkVeAwAAAPBehC2rIW0BAAAAPoGwZQUELAAAAMDnELYsxiB5AQAAAD6BsGUBpoBF1gIAAAB8AmHLAgyyFgAAAOBzCFsAAAAA4AaELYvhOVsAAACAbyBsWYA5YJG2AAAAAF9A2LIYohYAAADgGwhbFsBy7wAAAIDvIWxZgXGR1wAAAAC8FmHLYshaAAAAgG8gbFmAaWCL5QgBAAAAn0DYAgAAAAA38Pd0B8CztQAAAIqTgwcPavHixdq5c6eOHTumgIAAhYWFqUePHurXr59KlCiR53O9/vrrKlmypPr06ePGHiO/CFuWkJ22CF4AAAC+a9u2bbr//vsVGBio3r17KywsTOnp6fruu+/03HPPae/evXrqqafyfL4333xT5cuXJ2xZFGHLYshaAAAAvikuLk7jx49X1apVtWLFClWuXNm5b+DAgTpw4IC2bdvmuQ66UUpKikqVKuXpbhQ57tmyAEazAAAAfN/ixYuVkpKi6dOnm4JWlmuuuUZDhgyRJL377rsaPHiwoqOj1bBhQ91www164403TO1jYmK0Z88eff311woPD1d4eLgGDRrk3J+YmKjp06erQ4cOatiwobp27aqFCxfK4XCYzpOQkKCHH35YTZs2VfPmzfXoo4/qt99+U3h4uN577z1T2y+++EIDBgxQVFSUmjdvrnvvvVf79u0ztYmNjVV4eLj27t2rhx56SNddd50GDBigd999V+Hh4frvf//r8tnnz5+v+vXr6+jRo1dWVItjZMtqSF4AAAA+6dNPP1WNGjXUtGnTy7Z98803VbduXcXExMjf31+ffvqppk2bJsMwNHDgQEnSY489pqeeekqlSpXSqFGjJEmVKlWSJJ09e1Z33nmnjh49qv79++vqq6/W999/r3//+986fvy4Hn/8cUmSw+HQvffeq59++kl33HGHateurS1btujRRx916dOuXbs0YsQIVa9eXWPHjlVqaqpee+013XHHHXrvvfdUvXp1U/v7779f11xzjcaPHy/DMNS9e3f961//0rp16xQREWFqu27dOrVo0UJVqlS58sJaGGHLYohaAAAAvic5OVlHjx5V586d89T+tddeMy2Uceedd2r48OFatmyZM2x16dJFL730ksqXL6/evXubjl+2bJni4uL0/vvv69prr5Uk9e/fX5UrV9aSJUs0bNgwXX311frkk0/0/fff67HHHnOOqt1xxx266667XPo0a9YshYSEaNWqVSpXrpyzD7fccotiY2M1c+ZMU/t69erphRdeMG3r0qWL1q9fr4cfflh2+/lJdv/973+1d+9eDR8+PE+18SZMI7QA46JvAAAA4AuSk5MlSaVLl85T+5xBKykpSfHx8WrRooXi4uKUlJR02eM3b96sZs2aKTg4WPHx8c7/WrdurczMTH3zzTeSpM8++0wBAQHq27ev81i73e4MdFmOHTumX3/9VbfccoszaEnnA1Xr1q21fft2lz7079/fZVvv3r117NgxffXVV85t69atU4kSJdStW7fLfi5vw8iWBfAgYwAAAN9WpkwZSdKZM2fy1P67775TbGysfvjhB509e9a0LykpSWXLlr3k8QcOHNDvv/+u6OjoXPfHx8dLko4cOaLQ0FCVLFnStL9mzZqm90eOHJEk1apVy+VcderU0eeff+6yCMaF0wolqU2bNgoNDdXatWsVHR0th8Oh9evXq3Pnzs4a+RLClsUYDG0BAAD4nDJlyqhy5cras2fPZdsePHhQQ4cOVe3atTVx4kRdffXVCggI0Pbt27V8+XKXBS5y43A41KZNG91999257s+aWuhOQUFBLtv8/PzUq1cvvf3223ryySe1e/duHTt2TDfddJPb++MJhC2LYZALAADAN3Xq1EmrVq3S999/ryZNmly03datW5WWlqZ58+apatWqzu05p95lsdlsuZ6jZs2aSklJUevWrS/Zp6pVq+qrr77S2bNnTaNbBw8edGknSX/88YfLOfbv36/y5cvneWn33r17a+nSpdq6dat27NihChUqqG3btnk61ttwzxYAAABQBO6++26VKlVKkydP1okTJ1z2Hzx4UCtWrJCfn58k860mSUlJevfdd12OKVmypBITE1229+jRQ99//70+++wzl32JiYnKyMiQJLVt21bp6el6++23nfsdDodef/110zGVK1dW/fr1tWbNGtP1/ve//2nnzp3q0KHD5T6+U7169RQeHq533nlHH330kW688Ub5+/vmGJBvfiovw2gWAACA76tZs6aef/55jR8/XjfccIN69+6tsLAwpaWl6fvvv9fmzZvVp08fDR06VAEBARo1apT69++vM2fOaPXq1apYsaKOHz9uOmeDBg305ptv6pVXXtE111yjChUqKDo6WsOHD9fWrVs1atQo3XLLLWrQoIHOnj2r//3vf/rwww+1ZcsWVahQQV26dFFkZKRmzpypgwcPqnbt2tq6datOnz4tyTxy9sgjj2jEiBHq16+fbrvtNufS72XLltXYsWOvqBY333yzc/VCX51CKBG2LCHnfVoELwAAAN/VuXNnrV27VkuWLNGWLVv05ptvKjAwUOHh4Zo4caL69u2rwMBAzZ49Wy+99JJmzpypSpUq6Y477lCFChX02GOPmc43ZswYHTlyRIsXL9aZM2fUokULRUdHq2TJklq5cqUWLFigzZs3a82aNSpTpoyuvfZajRs3zrnAhp+fnxYsWKDp06fr/fffl91uV9euXTVmzBjdcccdpvuuWrdurcWLF2v27NmaPXu2/P39dd111+nhhx9WjRo1rqgOvXr10vPPP68aNWooMjKy4IW1KJvBUngXlZnpUHx83laMKYit3x/Sax/+T5JUMThIz41u4/ZrWpm/v13ly5dWQsIZZWRc/gZQX0YtslELM+qRjVqYUY9s1MLMHfUIDb30injwXp988onGjBmjN954Q82aNSv088fHx6td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nz7duT00NFT33HOPRo8erbp16zq3Z41ISVJkZKQ+/vhjbdiwQR9//LECAgIkSV9//bU2b97sDFvh4eF69NFHnedo2rSpSpYsqYkTJ+qJJ55QyZIlXfpqGIZmzZp12X795z//Udu2bTVw4EBnm+7du+erPr6gQGHrscce008//aT169dLktLS0tS3b1/t2bNHklS2bFmtWLFCERERBe+pDyNgAQAA5I9hGDry6uM6d+h3j1w/qHo9VR38dL4CV4kSJfTaa6+ZtjkcDh0+fFiPPfaYadSrRYsWstvt+vnnn01hq02bNs7XZcuWVYUKFdS8eXNn0JKka6+9Vl999ZXzvWEYWrFihd5++20dOnRI585lB9W4uDiFhYW59PWPP/7IU78iIiK0ZMkSxcbGqkOHDmrYsKHs9gItgO7VChS2vvrqK910003O9+vXr9eePXv0/PPPq169eho3bpzmzJmjV155pcAdBQAAAHKXv5ElT7Pb7WrUqJFp23fffSdJF11g7q+//jK9v/A+qMDAQAUHB5u2BQQEmKbxrVixQjNnztTdd9+tli1bKjg4WP/5z3/0r3/9yxS8ckpISMhTv7JWLX///fc1Z84cVahQQQMHDtSYMWPyPQLozQoUtk6cOGGaJvjJJ5+oYcOGzucD9O3bl7X58+DCRTEMwyiWP4wAAABXymazqergp71yGmFuypUrJ0l64oknFBkZ6bK/cuXKBb7G5s2bFRMTo4ceesi5bd++fYXSr8DAQI0bN07jxo3TgQMH9O677yo2NlbVq1fXzTffXOC+e5sCha2SJUsqKSlJ0vmb+77++mvdeeedzv2lS5d27sclGK5viVoAAAB5Y7PZZAv0jedT1a5dW1dddZXi4uJM9z0VptTUVNM0Q0lat25doffrmmuu0YMPPqhVq1Zp//79+e6vNytQ2GrQoIHefvtttWzZUlu3btWZM2cUExPj3H/w4EFVrFixwJ0EAAAAigObzaaJEydqwoQJSklJUceOHVWyZEkdOXJE27dv1/jx41WrVq0CXaN169Z69dVX9dprr+naa6/V2rVrdeDAgULp1+jRo9WgQQNFRESoZMmS+vTTT3X69Gm1atWqQH32VgUKWw888IDuvvtu3XrrrTIMQ927dzcNK3788cdq2rRpns934MABLVmyRD/++KP27Nmj2rVrOxffuJSYmBgdPnzYZftPP/2koKCgPF/fU1wWyGBoCwAAoNjq0aOHgoODNX/+fOeIU7Vq1dSuXTtVqlSpwOcfM2aMEhISNHv2bEnnVwucPHmyc7XCgvSradOm2rRpk5YtW6bMzEzVqlVLzz//vFq3bl3gfnsjm2EYBVoMLz4+Xrt371ZwcLBatGjh3J6YmKj3339fLVq0UP369fN0rk8++URPPfWUGjdurD/++EOGYeQ5bDVs2FDDhg0zbW/cuHGB5tBmZjoUH38m38fn1ept+7Tpy+x/TVj0SEf5FedVW/ztKl++tBISzigjw+Hp7ngUtchGLcyoRzZqYUY9slELM3fUIzS0+D2kFrgSBX7OVoUKFdSlSxeX7cHBwRoyZMgVnSsmJsZ5rokTJ+rnn3/O87GVKlVSVFTUFV3PqgoWfwEAAABYQaE81Dg5OVlHjhxRYmKichsou+666/J0nuK7Bj/pCgAAAPA1BQpbCQkJeuqpp/TRRx8pMzPTZX/WEua//vprQS6TJ+vWrdPbb7+tgIAANW/eXBMmTFB4eLjbr1sYGMkCAAAAfE+BwtaUKVP06aefatCgQWrevLnLA9SKSkxMjCIjI1W1alXFxcVp/vz5GjBggNasWaMaNWoU6Nz+/u4fbbvwvjI/P3uRXNeq/Pzspq/FGbXIRi3MqEc2amFGPbJRCzPqARS9AoWtnTt3asiQIXrkkUcKqz/5MnnyZOfr5s2bq02bNurRo4eWLFmiJ598Mt/ntdttKl++dCH08NICA83fhnLlSikwwM/t17W64OCSnu6CZVCLbNTCjHpkoxZm1CMbtTCjHkDRKVDYKlGihKpVq1ZYfSk0lStXVrNmzfTLL78U6DwOh6HExJRC6tXFpaVlmN4nJJwp1mHLz8+u4OCSSkw8q8zM4r16FLXIRi3MqEc2amFGPbJRCzN31KMo/lEa8GYFCls33XSTPvnkE7c93doKimKpWIfDfI2MDIfsBViy3ldkZjpYqvcf1CIbtTCjHtmohRn1yEYtzKgHUHQKFLa6d++ub775RsOHD1e/fv101VVXyc/PdUSmQYMGBbnMFTt69Ki+++479e7du0ivm18Xro/BehkAAACA9ytQ2BowYIDz9a5du1z2X+lqhGfPntX27dslSYcPH1ZycrI2b94sSWrRooUqVKigIUOG6MiRI/r4448lSevXr9enn36qDh06qHLlyoqLi9PChQvl5+enu+66qyAfz3NIWwAAAIDXK1DYevbZZwurH5KkkydP6v777zdty3r/6quvqmXLlnI4HKZl5qtXr65jx47pmWeeUVJSksqWLatWrVrpvvvuK/BKhEXGuPAtaQsAAADwdgUKW7fcckth9UPS+eD0+++/X7LNypUrTe+joqJctnkbohUAAEDxddNNN+n333/X66+/rubNm3ukD++9954mTZqkL774QhUqVDDt++STTzRmzBht2bJF1atXL/C1mjdvriFDhmjcuHEFPtfl7N+/X6+99pq+/PJLHT58WBUrVlS7du10//33mz7ngQMHtGTJEv3444/as2ePateurfXr1xf4+gUKWzkdO3ZM8fHxqlmzpkqVKlVYpy2WeMgxAABA8bBnzx7nYMO6des8FrZ81a5du/Ttt9+qX79+qlevno4cOaLZs2fr66+/1gcffKDAwEBJ578P27dvV+PGjeVwOGQU0l/IC/xUu08++UTXX3+9OnTooFtuuUU//vijJCk+Pl4333yz894qXFxhfTMBAADgXdatWye73a6WLVtq8+bNSk9P93SXvEZqaupl29x444364IMPNGTIELVs2VK33HKLXnjhBe3fv1+ffvqps11MTIy2b9+u2bNnF+rifgUKW1u3btW4ceNUvnx5jRkzxhQaKlSooCpVqui9994rcCeLG7IXAACA7zMMQ+vXr1erVq1011136dSpU/rss89Mbfbs2aOBAweqUaNG6tatm9auXavRo0dr0KBBpnb79u3Tvffeq2bNmikqKkr33HOPDh486JZ+Hzp0SOHh4frggw/0r3/9S9ddd53atm2rmTNnKiPD/PzYrIGZRo0a6bbbbtNPP/2U6zm3bdum22+/XZGRkWrVqpWmTp2qlJTs591+9dVXCg8P17Zt23TfffepadOmLms95KZ8+fKyXfBIpYiICEnnZ+ZlsdsLPAaVqwJNI5w7d66aN2+ulStXKiEhQXPmzDHtj4qK0qpVqwrUQQAAAOBSDMPQucw0j1w7yC/Q5S/zebV7924dPnxYY8aMUdu2bVWuXDmtX79eMTExks6P3AwbNkzBwcF67rnnJJ3/+3diYqJq1qzpPE9cXJz69++vunXrasaMGbLZbJo/f76GDh2qzZs3O6fKFbaXXnpJnTt31ksvvaTvv/9esbGxqlmzpu644w5J0q+//qr7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/SyMbFnAhdMGyVoAAAC+zzAMrV+/Xq1atdJdd92lU6dO6bPPPjO12bNnjwYOHKhGjRqpW7duWrt2rUaPHq1BgwaZ2u3bt0/33nuvmjVrpqioKN1zzz06ePBgnvuyevVqpaSk6P7773cGrSytWrVS69attWrVKqWmpurQoUMKDw/X5s2bXc7Tp08fPfjgg873f//9tyZMmKCWLVsqMjJSAwcO1M8//2w6JiYmRv/617+0aNEiderUSZGRkTp16tQl++vn52cKWlnbwsPDdezYMee2zz//XA6HQ9dff71zW7ly5dSmTRvt2LHjsnUpKMKWFbjcswUAAIC8MgxDmampHvmvIM9H3b17tw4fPqyePXuqbdu2KleunNavX+/cn5qaqmHDhunUqVN67rnn9OCDD2rRokX65ZdfTOeJi4tT//79dfr0ac2YMUPPP/+84uPjNXToUKWlpeWpL998843KlSunpk2b5ro/JiZGKSkp+uWXX1S9enVFRUVp48aNpjZ//vmnfvnlF/Xs2VOSdPr0aQ0YMEC//fabpkyZotjYWJUsWVJDhgzRyZMnTcd+9NFH2rZtmx5//HG98sorKlWqVJ76nVNGRoZ+/PFH1a5d27lt//79qlixokswq1OnTpHct8U0QgsgXAEAAOSPYRj6z8THlfTb7x65ftn69dTo2adls9mu+Nj169crKChI3bp1U0BAgLp37661a9fqzJkzKl26tN59912dPHlSb775pqpXry5Jatiwobp166aaNWs6zzNnzhyFhIRo2bJlCgoKkiQ1bdpUnTt31urVqzVw4MDL9uXo0aO6+uqrL7o/a9/Ro0clSTfeeKOef/55JScnq0yZMs7PExISorZt20qSVqxYocTERK1evVoVK1aUJEVHR6t79+5asmSJHnnkEef509PTtWjRonyFrCyLFy/W0aNHNXToUOe2xMRElS1b1qVtcHCwTp8+ne9r5RUjWxbg8i8irP0OAACQd/kIOp6WkZGhzZs3q0OHDs4w0KtXL509e1Yff/yxJOnnn39WWFiYM2hJUvXq1VWvXj3TuXbu3KmYmBj5+fkpIyNDGRkZCg4OVkREhMuUvcLSo0cPpaen65NPPnFu27hxo7p166bAwEBnv1q2bKmQkBBnv7LuT/vPf/5jOl/Lli0LFLR27typ2NhYjR49Wg0bNsz3eQobI1sWRNQC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dP6mervdblpFyFvUqFFD1157rTZv3mzavnHjRkVHRztXPGrfvr1Onz6tL774wtnmjz/+0H//+1+1b9/eua19+/basmWL0tPTTecKDg5WkyZNJElNmzZVmTJltGnTJmeb9PR0ffTRRy7n+u233/Tnn386t33xxRc6derURVcGu5SMjAw98MAD2r9/vxYvXqwqVaoU21pczI8//qj09HRVr15dgYGBatmypT788ENTm40bN6pOnTqqXr26pPNTzOx2uz766CNnm9OnT+vzzz93+QyX+90p7O9BXtWvX1+vvvqq6b9JkyZJkqZNm6apU6cW+5+PjRs3ys/PTxEREcWqFp06ddKpU6f066+/OrclJCTol19+UYMGDYrV70lOW7duVUpKinMVwizF6WejatWq+u9//2vadvjwYSUkJKhatWrFrh6AzymaFeZxoawHTt55553GZ599ZrzzzjtG8+bNLftQ45SUFGPTpk3Gpk2bjDvvvNPo0KGD833WM3SynrXx8ssvG19++aXxxBNPGBEREcbu3btN5xo2bJjRoUMHY+PGjcaWLVsu+cDFcePGGbt27TKWL19+0QcuNmzY0Fi+fLmxa9cuY9y4cZd84OLWrVuNDRs2GB06dMj3AxcnT55shIWFGUuXLnV5KGfW80mKSy0MwzDGjBljzJs3z9i6dauxa9cuY+nSpUabNm2MXr16OeuR9bDWqVOnGl9++aXx8ssvG+Hh4cbGjRtN55oyZYrRvHlz45133jE+++wz484777zow1ov97tTmN+Dgvjyyy9dnrNVXH4+hg0bZixYsMDYtm2bsW3bNmPKlClGeHi4MX369GJXi8zMTOPWW281unTp4nzYbN++fY0WLVoYx44dMwyjeP6ejBo1yujYsaPpGVPu6JuVfzaWL19uhIWFGU899ZTzocY9e/Y0WrdubcTHxxe7egC+hrDlQXv37jWGDBliREZGGtHR0caMGTNMDxi0kri4OCMsLCzX/7788ktnu7ffftvo2rWr0aBBA+cfvBdKTEw0Jk2aZDRv3tyIiooyxo4dm+uDnL/77jvj9ttvNxo2bGi0b9/eWLBggcv/kB0OhzF//nyjffv2RsOGDY3bb7/d5X88hmEYf//9tzF27FgjKirKaN68uTFp0iQjKSkpX7Xo1KnTRWsRFxdXrGphGOf/Z9y7d2+jSZMmRlRUlHHj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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Set Text Length Limits**"],"metadata":{"id":"2_e-ZI7kvJjL"}},{"cell_type":"code","source":["blogs[blogs['Contents_len'] < 100]['Contents']"],"metadata":{"id":"2584SVEUjMEc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267651989,"user_tz":-720,"elapsed":5,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"b6e9601a-ac8e-4f23-871b-b9eb174bbd30"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["16                                                                             \\r\\n\\r\\n\\t \\r\\n      RAR!\\r\\n    \\r\\n\n","41                                     \\r\\n\\r\\n\\t \\r\\n      Being sick bites, and I miss my friends. :( \\r\\n    \\r\\n\n","57                                     \\r\\n\\r\\n\\t \\r\\n      Today was a day. Nothing more. Nothing less.\\r\\n    \\r\\n\n","77                                                          \\r\\n\\r\\n\\t \\r\\n      RAR! Cleaning is pooey!\\r\\n    \\r\\n\n","91                                                         \\r\\n\\r\\n\\t \\r\\n      What's so wrong with me?\\r\\n    \\r\\n\n","                                                             ...                                                    \n","681248        \\r\\n\\r\\n\\r\\n       \\r\\n       urlLink    Good Ole Family Fun&nbsp; urlLink   \\r\\n     \\r\\n\\r\\n    \\r\\n\n","681251    \\r\\n\\r\\n\\r\\n       \\r\\n       urlLink    Whoa! He is muscle man!&nbsp; urlLink   \\r\\n     \\r\\n\\r\\n    \\r\\n\n","681253            \\r\\n\\r\\n\\r\\n       \\r\\n      Amy with Elijah&nbsp; urlLink     urlLink   \\r\\n     \\r\\n\\r\\n    \\r\\n\n","681254             \\r\\n\\r\\n\\r\\n       \\r\\n      Elijah and Amy&nbsp; urlLink     urlLink   \\r\\n     \\r\\n\\r\\n    \\r\\n\n","681266                        \\r\\n\\r\\n\\r\\n       \\r\\n      All my friends are make believe.\\r\\n     \\r\\n\\r\\n    \\r\\n\n","Name: Contents, Length: 49679, dtype: object"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["\n","# Modify the 'Contents' column to keep only the first 4000 characters\n","\n","blogs['Contents'] = blogs['Contents'].str.slice(stop=4000)\n","\n","\n","# Filter the DataFrame to keep only rows where 'Contents_len' is 100 or more\n","blogs = blogs[blogs['Contents_len'] >= 100]\n","\n","#caculate length again\n","blogs['Contents_len'] = blogs['Contents'].str.len()\n","\n","# Display the top 10 entries\n","blogs_sorted = blogs.sort_values(by='Contents_len')\n","top_10_blogs = blogs_sorted.head(100)\n","\n","top_10_blogs[['Contents', 'Contents_len']]\n","\n","\n"],"metadata":{"id":"jUETeF6RvH1h","colab":{"base_uri":"https://localhost:8080/","height":478},"executionInfo":{"status":"ok","timestamp":1716267652912,"user_tz":-720,"elapsed":926,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"e59ecba7-c4e6-4ec3-91e2-8b7e20c6e18a"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                                                                                          Contents  \\\n","87564         \\r\\n\\r\\n\\r\\n       \\r\\n       \"99 percent of lawyers give the rest a bad name.\" - Unknown  \\r\\n     \\r\\n\\r\\n    \\r\\n   \n","51456   \\r\\n\\r\\r\\n\\r\\r\\n           \\r\\r\\n      You really gotta love those  urlLink Canadians. \\r\\r\\n     \\r\\r\\n\\r\\r\\n        \\r\\n   \n","36348       \\r\\n\\r\\n    \\r\\n       \\r\\n        \\r\\n  urlLink mets sweep yanks at shea this weekend \\r\\n       \\r\\n    \\r\\n    \\r\\n   \n","158629        \\r\\n\\r\\n\\r\\n       \\r\\n      Market yourself. Be the righteous one. Fail, Fail, Alma Mater.\\r\\n     \\r\\n\\r\\n    \\r\\n   \n","28210             \\r\\n\\r\\n    \\r\\n       \\r\\n      Moving furniture is hard work.  Now I know why men were invented.\\r\\n      \\r\\n   \n","...                                                                                                                            ...   \n","580253            \\r\\n\\r\\n    \\r\\n        \"If you have but one wish, let it be for an idea.\"  -- Percy Sutton \\r\\n    \\r\\n    \\r\\n   \n","523539             \\r\\n\\r\\n\\t \\r\\n      me and buzz aldrin (2nd man on moon) warbird 2004&nbsp; urlLink     urlLink   \\r\\n    \\r\\n   \n","523264            \\r\\n\\r\\n    \\r\\n       \\r\\n       urlLink    Hannah's loves to play (5 years old)&nbsp; urlLink   \\r\\n      \\r\\n   \n","434703            \\r\\n\\r\\n    \\r\\n       \\r\\n       urlLink    Preparation of Ladoos with Veena in Stuttgart,Germany\\r\\n      \\r\\n   \n","541433         \\r\\n\\r\\n\\t \\r\\n       yes, i'm a slacker... but i'm also a fast typer. so there. haters.  \\r\\n     \\r\\n\\r\\n    \\r\\n   \n","\n","        Contents_len  \n","87564            100  \n","51456            100  \n","36348            100  \n","158629           100  \n","28210            100  \n","...              ...  \n","580253           100  \n","523539           100  \n","523264           100  \n","434703           100  \n","541433           100  \n","\n","[100 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-1423ff29-2d84-4e1f-a379-9090ebfcec79\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Contents</th>\n","      <th>Contents_len</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>87564</th>\n","      <td>\\r\\n\\r\\n\\r\\n       \\r\\n       \"99 percent of lawyers give the rest a bad name.\" - Unknown  \\r\\n     \\r\\n\\r\\n    \\r\\n</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>51456</th>\n","      <td>\\r\\n\\r\\r\\n\\r\\r\\n           \\r\\r\\n      You really gotta love those  urlLink Canadians. \\r\\r\\n     \\r\\r\\n\\r\\r\\n        \\r\\n</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>36348</th>\n","      <td>\\r\\n\\r\\n    \\r\\n       \\r\\n        \\r\\n  urlLink mets sweep yanks at shea this weekend \\r\\n       \\r\\n    \\r\\n    \\r\\n</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>158629</th>\n","      <td>\\r\\n\\r\\n\\r\\n       \\r\\n      Market yourself. Be the righteous one. Fail, Fail, Alma Mater.\\r\\n     \\r\\n\\r\\n    \\r\\n</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>28210</th>\n","      <td>\\r\\n\\r\\n    \\r\\n       \\r\\n      Moving furniture is hard work.  Now I know why men were invented.\\r\\n      \\r\\n</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>580253</th>\n","      <td>\\r\\n\\r\\n    \\r\\n        \"If you have but one wish, let it be for an idea.\"  -- Percy Sutton \\r\\n    \\r\\n    \\r\\n</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>523539</th>\n","      <td>\\r\\n\\r\\n\\t \\r\\n      me and buzz aldrin (2nd man on moon) warbird 2004&amp;nbsp; urlLink     urlLink   \\r\\n    \\r\\n</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>523264</th>\n","      <td>\\r\\n\\r\\n    \\r\\n       \\r\\n       urlLink    Hannah's loves to play (5 years old)&amp;nbsp; urlLink   \\r\\n      \\r\\n</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>434703</th>\n","      <td>\\r\\n\\r\\n    \\r\\n       \\r\\n       urlLink    Preparation of Ladoos with Veena in Stuttgart,Germany\\r\\n      \\r\\n</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>541433</th>\n","      <td>\\r\\n\\r\\n\\t \\r\\n       yes, i'm a slacker... but i'm also a fast typer. so there. haters.  \\r\\n     \\r\\n\\r\\n    \\r\\n</td>\n","      <td>100</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1423ff29-2d84-4e1f-a379-9090ebfcec79')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1423ff29-2d84-4e1f-a379-9090ebfcec79 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1423ff29-2d84-4e1f-a379-9090ebfcec79');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d25f75cd-74fe-40a3-835c-a49e1eaf422d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d25f75cd-74fe-40a3-835c-a49e1eaf422d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d25f75cd-74fe-40a3-835c-a49e1eaf422d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"top_10_blogs[['Contents', 'Contents_len']]\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"Contents\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"\\r\\n\\r\\n     \\r\\n      Thanks Guys!! ;o) Hope everyone is goin to have fun tonight!!!!! ;o)\\r\\n     \\r\\n    \\r\\n\",\n          \"\\r\\n\\r\\n     \\r\\n       urlLink Understanding MIDP 2.0's Security Architecture : \\\"prompts \\\"\\r\\n     \\r\\n    \\r\\n\",\n          \"\\r\\n\\r\\n\\t \\r\\n       urlLink    Vanessa, me, YounHee and YounHee's mom at Lotte World  urlLink    \\r\\n    \\r\\n\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Contents_len\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 100,\n        \"max\": 100,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          100\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["plt.figure(figsize=(15, 5))\n","sns.distplot(blogs['Contents_len']).set_title('Blogs length distribution');\n","\n","\n","\n","# Prepare the data by melting the category columns into a single column\n","category_columns = ['Males', 'Females', 'Age_Under_21', 'Age_Over_20', 'Students', 'Everyone']\n","blogs_melted = pd.melt(blogs, id_vars=['Contents_len'], value_vars=category_columns,\n","                       var_name='Category', value_name='Value')\n","\n","# Filter out rows where the category flag is 0\n","blogs_melted = blogs_melted[blogs_melted['Value'] == 1]\n","\n","sns.displot(blogs_melted, x=\"Contents_len\", hue=\"Category\", kind=\"kde\",height=7,aspect =1 )"],"metadata":{"id":"UEktE54qj4Cy","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1716267661772,"user_tz":-720,"elapsed":8863,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"f308e48a-180c-45fa-d6e5-09f6e78a43a5"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7e2baeb6ffd0>"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 865.625x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**1.5 Random Sampling 10000 Records**\n"],"metadata":{"id":"AfCckFqsVywv"}},{"cell_type":"code","source":["# Randomly pick 1000 rows from the cleaned data\n","blogs = blogs.sample(n=10000, random_state=42)"],"metadata":{"id":"7Z8nOhGXnGtz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267661772,"user_tz":-720,"elapsed":12,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"c9fe1229-e6a2-4b45-b4b2-759b1d6dcd0d"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["category_columns = ['Males', 'Females', 'Age_Under_21', 'Age_Over_20', 'Students', 'Everyone']\n","blogs_melted = pd.melt(blogs, id_vars=['Contents_len'], value_vars=category_columns,\n","                       var_name='Category', value_name='Value')\n","\n","# Filter out rows where the category flag is 0\n","blogs_melted = blogs_melted[blogs_melted['Value'] == 1]\n","\n","# Count the number of blogs in each category\n","category_counts = blogs_melted['Category'].value_counts().reset_index()\n","category_counts.columns = ['Category', 'Count']\n","\n","# Plot the bar chart\n","plt.figure(figsize=(10, 6))\n","sns.barplot(data=category_counts, x='Category', y='Count', palette='viridis')\n","plt.title('Number of Blogs in Each Category')\n","plt.xlabel('Category')\n","plt.ylabel('Count')\n","plt.xticks(rotation=45)\n","plt.show()"],"metadata":{"id":"sfjlYVPBBsp2","colab":{"base_uri":"https://localhost:8080/","height":702},"executionInfo":{"status":"ok","timestamp":1716267662485,"user_tz":-720,"elapsed":724,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"aea0cfe8-096f-4104-ba8c-8ee385a52ce8"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["blogs.info()"],"metadata":{"id":"PtwuFZA6VBVP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267662485,"user_tz":-720,"elapsed":11,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"97812550-12c7-41ff-9b46-c1cee34cbd85"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 10000 entries, 209225 to 396738\n","Data columns (total 15 columns):\n"," #   Column        Non-Null Count  Dtype \n","---  ------        --------------  ----- \n"," 0   Filename      10000 non-null  object\n"," 1   Date          10000 non-null  object\n"," 2   Contents      10000 non-null  object\n"," 3   BlogUserID    10000 non-null  object\n"," 4   Gender        10000 non-null  object\n"," 5   Age           10000 non-null  object\n"," 6   Tag           10000 non-null  object\n"," 7   zodiac        10000 non-null  object\n"," 8   Males         10000 non-null  int64 \n"," 9   Females       10000 non-null  int64 \n"," 10  Age_Under_21  10000 non-null  int64 \n"," 11  Age_Over_20   10000 non-null  int64 \n"," 12  Students      10000 non-null  int64 \n"," 13  Everyone      10000 non-null  int64 \n"," 14  Contents_len  10000 non-null  int64 \n","dtypes: int64(7), object(8)\n","memory usage: 1.2+ MB\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["# **Step 2, Text Normalization**"],"metadata":{"id":"WHNuHNjVV6WI"}},{"cell_type":"markdown","source":["In the field of Natural Language Processing (NLP), text preprocessing is the practice of cleaning and preparing text data. I will be using an open-source software library called spaCy to prepare the data for analysis, but other libraries such as NLTK can also be used.\n","\n","I told you earlier to import and download something called 'en_core_web_md' which is spaCy's pre-trained model. The model, which I will call 'nlp', can be thought of as a pipeline. When you call 'nlp' on a text or word, the text runs through a processing pipeline, which is depicted below. It means that if the text isn't tokenized, it will then be tokenized, and afterwards, different components (tagger, parser, ner etc.) will be activated. To tokenize text means turning a string or document into smaller chunks (tokens).\n","\n","\n","https://towardsdatascience.com/topic-modelling-in-python-with-spacy-and-gensim-dc8f7748bdbf\n","\n","\n","The model is specially trained on English text (notice the 'en' in the model name), making it capable of detecting different English words. Other language models are also supported.\n","\n","\n","spaCy's pipeline\n","The most interesting component in the pipeline is the tagger which assigns Part-Of-Speech (POS) tags based on SpaCy's English language model to gain a variety of annotations. A POS tag (or part-of-speech tag) is a special label assigned to each token in a text corpus to indicate the type of token (is it an adjective? Punctuation? A verb? etc.) and often also other grammatical categories such as tense, number (plural/singular), symbols etc. POS tags are used in corpus searches and in-text analysis tools and algorithms.\n","\n","Some of the POS tags are listed below:\n","\n","\n","https://towardsdatascience.com/topic-modelling-in-python-with-spacy-and-gensim-dc8f7748bdbf\n","\n","POS tags\n","We can use the POS tags to preprocess the data by removing unwanted tags. Assuming we want to remove all numbers in our text, we can then point at a specific tag and remove it.\n","\n","I will focus on the 'Contents' column, where I will tokenize, lemmatize , remove stopwords and replace synomns"],"metadata":{"id":"yChlgV2IWGO4"}},{"cell_type":"markdown","source":["##### **Let's Check the textual content of the Data:**"],"metadata":{"id":"_vvcmzlkT8Wl"}},{"cell_type":"code","source":["pd.set_option('display.max_colwidth', None)\n","blogs['Contents'].head(10)"],"metadata":{"id":"uM-esAQqSjmQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267662485,"user_tz":-720,"elapsed":10,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"a1315384-6e90-4413-9859-7802d80aed6a"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plainr\\n\\r\\n\\t \\r\\n      Yes, I know, I work too hard.  There's another  urlLink new entry   on Malarkey.\\r\\n     \\r\\n\\r\\n    \\r\\n\n","211629    \\r\\n\\r\\n\\t \\r\\n      hello peoples!  OMG!  i have like so much stuff to do this week.  i have a chem test tomorrow and a test in both precal and spanish thursday.  i have a project to turn in for chemistry on thursday cause i wont be at school friday.  i have to write up some thing for spanish cause i wont be there friday for the stupid thing.  and i have a bunch of stuff to finalize for mexico.  yeah for those that dont know i wont be at school on friday cause ill be on my way to mexico and i get bck the following friday.  its gonna be fun.  ill miss you all though!  but ill at least have that saturday and sunday to hang out.  but yeah just a bunch of stuff to do between tonight and tomorrow.    i called bryant today!  i was going to see if he wanted to hang out or something.  he couldnt today cause he was busy with some stuff, but he said that he would probably come find me during lunch tomorrow.  for those that dont know, he leaves after 4th period.  but yeah he said he would probably stop by, and i might have a chance to hang out with him after school tomorrow.  if things go well during lunch i might see if he wants to go to a movie or something.  i probably shouldnt just cause i have a bunch to do, but ill be staying up late anyways so i might as well make it productive by working on all eight thousand projects i have.  i get to hang out with bryant so it doesnt matter  ^_^    i've never really met someone that made me happy like this.  i dont know what it is...  but once again i shouldnt get ahead of myself.  ive only talked to him a couple times and its not like we are going out or anything, its just as friends.  but hey, someday we might go out.  that would be so great.  so for the time being he is considered a \"friend with possibilities\"  ::warning ranting ahead:: grrrr!  my parents picked me up a little late from school today.  try 3:35 to be exact.  it wasnt horriblely late but they always complain when im like 30 seconds late.  so yeah i wasnt happy about that.  but then afterwards my mom decides we need to go grocery shopping. its not like she can drop me off at home first or anything.  so yeah i finally got home at like 5pm.  i was jsut disgruntled cause i really wanted to get home to work on some stuff.    oh yeh im done ranting now.  i just had to get that out.  for some reason ive been really tired the last couple of days.  yeah, ive slept like crap and all but this is a different kind of tired.  its really wierd, im not quite sure how to explain it either.  oh yeah, hopefully it will get better before i head to mexico.\\r\\n     \\r\\n    \\r\\n\nr\\n\\r\\n     \\r\\n       urlLink      Keeping the future in view, I guess.     Today I saw a caterpillar drop out of a tree onto an asphalt driveway. It was the sad little plop of his body hitting the pavement that got my attention.  Ouch.  Dreaming about butterflies again, little fellow?      He just lay there, stunned. Didn't move at all. After about a minute I felt compelled to help the poor guy. As soon as I touched him, he started writhing, kicking his miniscule legs in defiance of the rescue attempt. I tossed him onto the lawn against his will.  Good grief.  Where did the little jerk pick up his approach to an offer of help? Us humans?  \\r\\n     \\r\\n    \\r\\n\nr\\n\\r\\n    \\r\\n       \\r\\n      ohhh, I feel so bad, so bad, so bad....  It's been awhile since I've been this depressed. But the last time I was like this, it was because things were going really really shitty. And now they're not. In fact, they've been really, really good. But for some reason, in the middle of the day today I realized that I'm incredibly depressed about something but I'm not even really sure what it is. And I cried. For the first time in ages, I really cried. I hadn't cried like this since like, February after MMISL audits. I got up to put out my candle and I was listening to Jump Little Children and I fell down, I don't know if it was the song or I was just crying too hard. Either way I just couldn't control myself.  And I have no reason to be upset. Everything has been going great. I just can't appreciate what I have, that's all.  I want to see them.  Fuck this sad shit. Let me smoke my marlboro and I'll be on my way.  Have a great weekend, children. Oh and looking past the sadness, I have some additions to my 'I love' list: nail salons, lotion, body parts, cd covers, drum solos, and big headphones. \\r\\n       \\r\\n    \\r\\n    \\r\\n\nr\\n\\r\\n\\t \\r\\n      My sweet sugar mama Dance for me won't ya? Take me on ya joyride I'ma take you on front back and side to side  Would ya ever take me on looped around your way baby Ooh baby how you lay it down I wanna love ya everyday  My lady, my baby, my sweet sugar mommy baby crush me Lemme take a hold of you soon i'll be servin breakfast for two  Would ya ever take me on looped around your way baby Ooh baby how you lay it down I wanna love ya everyday  Tell me what ya want I'll give it to get in your pants Looped around your way baby I wanna love ya everyday\\r\\n    \\r\\n\nr\\n\\r\\n\\t \\r\\n       birthday   My birthday was a success...apart from the fact that I'm another year older that is.   We went to Seaworld as planned...stayed at a very nice hotel, since we were with another couple, we had adjoining rooms, and between our rooms was a \"common\" area...with a full kitchen, a living room and a balcony...it was very nice.  Seaworld was definetely a success as well.  It wasn't 90 degrees out, there weren't a million people, the shows were fun, no long lines to stand in...even the food was better than uh...Disneyland.  Weird huh? Yeah.    My week even got off to a good start.  Today however, things went downhill.  I got to work and was informed that we needed to start keeping track of every call we get on a tick-sheet.  Great. Why would they make us do that? I'll tell you why, because one of our positions is going to \"go away\" soon I bet.  Ugh. So I had this nervous \"throw-uppy\" feeling in my stomach all day.  I can't afford to lose this job.  I'm not only not financially stable enough to be unemployed, but I'm not very good at finding new jobs.  Ugh. They scare me.     \\r\\n    \\r\\n\nr\\n\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t   So, there's this guy. He's intelligent and older and not painful to look at. He has some great ideas, about his future and mine. He says he cares about me, my friends, my family, even perfect strangers. He has a good job. He comes from money, but he's also made his own. And he's raised goo kids. He's got a good education. The problem is, well, he's not very charismatic. And I don't like a lot of his friends. And even though he says he's better, he's not so different from my current guy. I mean, I definitely don't like the current guy. I definitely want to break up. I'm just not so sure this new guy is better for me. Maybe you can help me decide.  urlLink Here's  some more info about him. What do you think? \\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\nr\\n\\r\\n\\r\\n       \\r\\n      I thought mega retail outlets were not making money, apparently they are, because  urlLink RPG  is spending a lot of moeny...\\r\\n     \\r\\n\\r\\n \\r\\n    \\r\\n\nr\\n\\r\\n\\r\\n       \\r\\n      What do you get if you add a pretty girl, a humid night and an Audi TT ? The correct answer (but not probably the one that first comes to mind) is last nights Clydebank 10k Road Race.  A little explanation is required â the pretty girl is Nicola (my dentist), it  was  a little humid, she does drive a really nice black TT and after Helensburgh last week we were going to run together to try and get her a new PB.  The race start was, as always, mad â confusion to exactly where the start was and confusion to had the clock started. The congestion remained until the industrial park where there was an opportunity to spread out a little. Going through 3km a quick pace check indicated that we were on target. Settling down, we were bang on time for under 45 minutes at the half way mark. Unfortunately around 7km we had to slow up a little but Nicola put in a fantastic last 1k to finish in just over 48 minutes.   As tends to happen with 10k races â¦ no matter how sore it is at the time, recovery is quick. Disheartened about not achieving a new PB ? Nope â there is always Dumbarton next week or Kirkintilloch on the 24th June or â¦â¦â¦â¦. \\r\\n     \\r\\n\\r\\n    \\r\\n\nr\\n\\r\\n\\r\\n       \\r\\n      Today I got a call from Time Warner Cable about the resume I submitted for a technical support position. They want to meet with me tomorrow morning for an interview. OK, this is good. Unfortunately this position would be a 20 minute drive away, which may be too much for my tired old car to handle on a daily basis. If the job looks to be worth it I will find some way to make it happen. This interview gives me hope anyway, even if for whatever reason I don't get the job.  As a radio ham, the events of the sun interest me. It may not be obvious to those outside this hobby but the condition of the sun plays a major role in radio propagation. Recently solar flares have erupted, causing some strange conditions on the radio. Some of these conditions are strange enough to cause aurora as far south as Texas. Here in Ohio we may get some aurora soon. Check  urlLink www.spacew.com  out for an idea of how likely aurora is where you are. \\r\\n     \\r\\n\\r\\n    \\r\\n\n","Name: Contents, dtype: object"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["**2.1. Text Wrangling and Pre-Processing**\n","\n","We will create a spaCy pipeline that includes custom components for each preprocessing step mentioned:"],"metadata":{"id":"mgvTIXIaIUz0"}},{"cell_type":"code","source":["import spacy\n","from spacy.language import Language\n","import re\n","from bs4 import BeautifulSoup\n","import contractions\n","import inflect\n","from nltk.stem import PorterStemmer\n","from nltk.corpus import wordnet\n","from contractions import fix as contractions_fix\n","\n","from spellchecker import SpellChecker\n","\n","\n","import nltk\n","nltk.download('wordnet')\n","\n","\n","\n","# Initialize necessary tools\n","nlp_customer = spacy.load(\"en_core_web_sm\")\n","\n","# 查看默认的管道组件及其顺序\n","print(nlp_customer.pipe_names)\n","#['tok2vec', 'tagger', 'parser', 'attribute_ruler', 'lemmatizer', 'ner']\n","\n","p = inflect.engine()\n","stemmer = PorterStemmer()\n","spell = SpellChecker()\n","\n","debug = \"1\"  # 启用调试输出\n","\n","def log_change(step_name, original_text, new_text):\n","  if original_text != new_text and debug == \"1\":\n","    print(f\"Step: {step_name}\")\n","    print(f\"Input: {original_text}\")\n","    print(f\"Output: {new_text}\\n\")\n","\n","\n","# Custom components\n","@Language.component(\"remove_non_ascii\")\n","def remove_non_ascii(doc):\n","    original_text = doc.text\n","    new_text = re.sub(r'[^\\x00-\\x7F]+', ' ', original_text)\n","    log_change(\"remove_non_ascii\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"replace_multiple_spaces\")\n","def replace_multiple_spaces(doc):\n","    original_text = doc.text\n","    new_text = re.sub(r'\\s+', ' ', original_text)\n","    log_change(\"replace_multiple_spaces\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"convert_emojis\")\n","def convert_emojis(doc):\n","    original_text = doc.text\n","    new_text = emoji.demojize(original_text)\n","    log_change(\"convert_emojis\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"remove_custom_emoticons\")\n","def remove_custom_emoticons(doc):\n","    original_text = doc.text\n","    emoticons = {\":)\", \":(\", \":D\", \":P\", \":-)\", \":-(\", \":-D\", \":-P\"}\n","    new_text = ' '.join(word for word in original_text.split() if word not in emoticons)\n","    log_change(\"remove_custom_emoticons\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"html_remover\")\n","def html_remover(doc):\n","    original_text = doc.text\n","    new_text = BeautifulSoup(original_text, \"html.parser\").get_text()\n","    log_change(\"html_remover\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"contraction_expander\")\n","def contraction_expander(doc):\n","    original_text = doc.text\n","    new_text = contractions_fix(original_text)\n","    log_change(\"contraction_expander\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"lowercase_converter\")\n","def lowercase_converter(doc):\n","    original_text = doc.text\n","    new_text = original_text.lower()\n","    log_change(\"lowercase_converter\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"number_to_word_converter\")\n","def number_to_word_converter(doc):\n","    original_text = doc.text\n","\n","    def convert_numbers(text):\n","        words = text.split()\n","        new_words = []\n","        for word in words:\n","            if word.isdigit():\n","                new_word = p.number_to_words(word)\n","                new_words.append(new_word)\n","            else:\n","                new_words.append(word)\n","        return ' '.join(new_words)\n","\n","    new_text = convert_numbers(original_text)\n","    log_change(\"number_to_word_converter\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","#Special characters and symbols are usually non-alphanumeric characters\n","# which adds to the extra noise in unstructured text.\n","# Usually, simple regular expressions (regexes) can be used to remove them.\n","@Language.component(\"special_char_remover\")\n","def special_char_remover(doc):\n","    original_text = doc.text\n","    new_text = re.sub(r'[^a-zA-Z0-9\\s]', '', original_text)\n","    log_change(\"special_char_remover\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"whitespace_remover\")\n","def whitespace_remover(doc):\n","    original_text = doc.text\n","    new_text = ' '.join(original_text.split())\n","    log_change(\"whitespace_remover\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"stemmer\")\n","def stemmer_component(doc):\n","    original_text = doc.text\n","    tokens = [stemmer.stem(token.text) for token in doc]\n","    new_text = ' '.join(tokens)\n","    log_change(\"stemmer\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"lemmatization_and_stopword_removal\")\n","def lemmatization_and_stopword_removal(doc):\n","    original_text = doc.text\n","    tokens = [token.lemma_ for token in doc if not token.is_stop]\n","    new_text = ' '.join(tokens)\n","    log_change(\"lemmatization_and_stopword_removal\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","\n","@Language.component(\"pos_tagger\")\n","def pos_tagger(doc):\n","    original_text = doc.text\n","    pos_tags = [(token.text, token.pos_) for token in doc]\n","    print(f\"POS Tags: {pos_tags}\")\n","    return doc\n","\n","@Language.component(\"chunking\")\n","def chunking(doc):\n","    original_text = doc.text\n","    chunks = [(chunk.text, chunk.label_) for chunk in doc.noun_chunks]\n","    print(f\"Noun Chunks: {chunks}\")\n","    return doc\n","\n","@Language.component(\"dependency_parser\")\n","def dependency_parser(doc):\n","    original_text = doc.text\n","    dependencies = [(token.text, token.dep_, token.head.text) for token in doc]\n","    print(f\"Dependency Parsing: {dependencies}\")\n","    return doc\n","\n","\n","@Language.component(\"correct_typos_and_spelling_errors\")\n","def correct_typos_and_spelling_errors(doc):\n","  original_text = doc.text\n","  corrected_words = []\n","\n","  for token in doc:\n","      # 检查是否为标点符号或其他非单词字符\n","      if token.is_punct or token.is_space:\n","          corrected_words.append(token.text)\n","      else:\n","          # 使用 TextBlob 纠正拼写错误\n","          corrected_word = str(TextBlob(token.text).correct())\n","          corrected_words.append(corrected_word)\n","\n","  corrected_text = \"\".join([token if token in \",.?!;:\" else \" \" + token for token in corrected_words]).strip()\n","  log_change(\"correct_typos_and_spelling_errors\", original_text, corrected_text)\n","  return nlp_customer.make_doc(corrected_text)\n","\n","@Language.component(\"incorporate_synonyms\")\n","def incorporate_synonyms(doc):\n","    original_text = doc.text\n","    def get_synonym(word):\n","        synonyms = wordnet.synsets(word)\n","        if synonyms:\n","            synonym = synonyms[0].lemmas()[0].name()\n","            return synonym if synonym != word else word\n","        return word\n","\n","    new_text = \" \".join([get_synonym(token.text) for token in doc])\n","    log_change(\"incorporate_synonyms\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","\n","@Language.component(\"stopword_removal\")\n","def stopword_removal(doc):\n","    original_text = doc.text\n","    tokens = [token.text for token in doc if not token.is_stop]\n","    new_text = ' '.join(tokens)\n","    log_change(\"stopword_removal\", original_text, new_text)\n","    return nlp_customer.make_doc(new_text)\n","\n","@Language.component(\"customer_extraction_placeholder\")\n","def customer_extraction_placeholder(doc):\n","    return doc\n","\n","\n","# Add components to the spaCy pipeline\n","nlp_customer.add_pipe(\"remove_non_ascii\", first=True)\n","#nlp_customer.add_pipe(\"lowercase_converter\", after=\"remove_non_ascii\") 影响语义分析， 删除\n","nlp_customer.add_pipe(\"html_remover\", after=\"remove_non_ascii\")\n","nlp_customer.add_pipe(\"replace_multiple_spaces\", after=\"html_remover\")\n","\n","nlp_customer.add_pipe(\"convert_emojis\", after=\"replace_multiple_spaces\")\n","nlp_customer.add_pipe(\"remove_custom_emoticons\", after=\"convert_emojis\")\n","\n","nlp_customer.add_pipe(\"contraction_expander\", after=\"remove_custom_emoticons\")\n","\n","nlp_customer.add_pipe(\"number_to_word_converter\", after=\"contraction_expander\")\n","#nlp_customer.add_pipe(\"special_char_remover\", after=\"number_to_word_converter\")\n","nlp_customer.add_pipe(\"whitespace_remover\", after=\"number_to_word_converter\")\n","# urlLink      unlink\n","#nlp_customer.add_pipe(\"correct_typos_and_spelling_errors\", after=\"whitespace_remover\")\n","\n","#tokenizer here, spaCy do it every time.\n","\n","\n","'''\n","# 添加默认组件,在自定义预处理步骤之后\n","#['tok2vec', 'tagger', 'parser', 'attribute_ruler', 'lemmatizer', 'ner']\n","\n","add customer extraction strategies here, and I can change the pipleline in following process\n","\n","'''\n","#nlp_customer.add_pipe(\"customer_extraction_placeholder\", after=\"ner\")\n","\n","#nlp_customer.add_pipe(\"stopword_removal\", after=\"customer_extraction_placeholder\")\n","#nlp_customer.add_pipe(\"incorporate_synonyms\", after=\"stopword_removal\")\n","\n","print(nlp_customer.pipe_names)\n","\n","# Example usage\n","text = \"\"\"\n","   urlLink      Keeping the future in view, I guess.     Today I saw a caterpillar drop out of a tree onto an asphalt driveway. It was the sad little plop of his body hitting the pavement that got my attention.  Ouch.  Dreaming about butterflies again, little fellow?      He just lay there, stunned. Didn't move at all. After about a minute I felt compelled to help the poor guy. As soon as I touched him, he started writhing, kicking his miniscule legs in defiance of the rescue attempt. I tossed him onto the lawn against his will.  Good grief.  Where did the little jerk pick up his approach to an offer of help? Us humans?\n","\n","\"\"\"\n","\n","debug = \"0\"  # 启用调试输出\n","# Process text with the custom spaCy pipeline\n","doc = nlp_customer(text)\n","print(text)\n","print(doc.text)\n","\n","\n"],"metadata":{"id":"4XUBjsG3Qo-n","collapsed":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267663237,"user_tz":-720,"elapsed":758,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"4be46da9-9c88-495b-8a97-02d890e78356"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n"]},{"output_type":"stream","name":"stdout","text":["['tok2vec', 'tagger', 'parser', 'attribute_ruler', 'lemmatizer', 'ner']\n","['remove_non_ascii', 'html_remover', 'replace_multiple_spaces', 'convert_emojis', 'remove_custom_emoticons', 'contraction_expander', 'number_to_word_converter', 'whitespace_remover', 'tok2vec', 'tagger', 'parser', 'attribute_ruler', 'lemmatizer', 'ner']\n","\n","   urlLink      Keeping the future in view, I guess.     Today I saw a caterpillar drop out of a tree onto an asphalt driveway. It was the sad little plop of his body hitting the pavement that got my attention.  Ouch.  Dreaming about butterflies again, little fellow?      He just lay there, stunned. Didn't move at all. After about a minute I felt compelled to help the poor guy. As soon as I touched him, he started writhing, kicking his miniscule legs in defiance of the rescue attempt. I tossed him onto the lawn against his will.  Good grief.  Where did the little jerk pick up his approach to an offer of help? Us humans?\n","\n","\n","urlLink Keeping the future in view, I guess. Today I saw a caterpillar drop out of a tree onto an asphalt driveway. It was the sad little plop of his body hitting the pavement that got my attention. Ouch. Dreaming about butterflies again, little fellow? He just lay there, stunned. Did not move at all. After about a minute I felt compelled to help the poor guy. As soon as I touched him, he started writhing, kicking his miniscule legs in defiance of the rescue attempt. I tossed him onto the lawn against his will. Good grief. Where did the little jerk pick up his approach to an offer of help? Us humans?\n"]}]},{"cell_type":"markdown","source":["##**Step 3. Extract Features Using Different Strategies**\n"],"metadata":{"id":"iJOZMX28tDoK"}},{"cell_type":"markdown","source":["**3.1 add customer stop words**"],"metadata":{"id":"qZHUKHfKRuFh"}},{"cell_type":"code","source":["\n","# Our spaCy model:\n","nlp_customer2 = en_core_web_md.load()\n","\n","# Define a list of custom stop words\n","custom_stop_words = set(\n","    [ 'chance', 'post', 'end', 'today', 'ass', 'heart', 'search', 'member', 'month',\n","    'website', 'world', 'wall', 'things', 'email', 'ng', 'record', 'woman', 'way',\n","    'picture', 'room', 'lot', 'nbsp', 'party', 'report', 'kid', 'hour', 'character', 'period',\n","    'list', 'love', 'week', 'account', 'window', 'photo', 'test', 'look', 'card', 'kind',\n","    'luck', 'level', 'rest', 'idea', 'boy', 'moment', 'guy', 'seat', 'page', 'thought',\n","    'life', 'light', 'mind', 'state', 'piece', 'link', 'child', 'blog', 'project', 'feeling',\n","    'friday', 'hell', 'place', 'time', 'crap', 'word', 'lol', 'morning', 'reason', 'game',\n","    'weekend', 'day', 'couple', 'tomorrow', 'people', 'urlLink', 'blogger', 'truth', 'stuff', 'thing',\n","    'god', 'water', 'point', 'la', 'number', 'issue', 'group', 'money', 'year', 'man',\n","    'date', 'tonight', 'night', 'pic', 'body', 'right', 'city', 'brother', 'news', 'lord', 'girl', 'team', 'site',\n","    'jesus', 'n', 'tha', 'ko', 'information', 'kerry', 'letter','case', 'age', 'summer', 'lesson', 'death', 'middle', 'fan', 'system',\n","    'sister', 'mom', 'need', 'sin', 'nightmare', 'al', 'bit', 'fun', 'food',\n","    'class', 'story', 'home', 'dad', 'new', 'parent', 'minute', 'shit', 'sunday','haha','mood','son','living',\n","    'quality','ppl','student','chris','question','baby','son','problem','head','person','yesterday','house','friend','school','message','face','pain','comment'\n","    ,'block','country','sam','fuck','sex','hmmm','voice','answer','space','omg','change'\n","    ,'table','template','use','center','type','button','set','trick','entry','decision','rate','area','layout','soul','bed','benifit','pack','door','passion','bottle'\n","    ,'one','situation','process','cousin','min','deal','road','good','struggle','set','image','cell','mud','direction','cause','sum','scale','phenomenon','break'\n","    ,'bitch','it','everything','that','what','me'\n","    ,\"day\", \"story\", \"mistake\", \"life\", \"smile\", \"ya\", \"trouble\", \"care\", \"sense\",\n","    \"ability\", \"issue\", \"hour\", \"advice\", \"attention\", \"name\", \"access\", \"sense\",\n","    \"plan\", \"child\", \"mail\", \"minute\", \"call\", \"post\", \"difference\", \"good\",\n","    \"discussion\", \"hold\", \"place\", \"second\", \"form\", \"daughter\", \"goodbye\",\n","    \"picture\", \"word\", \"comment\", \"kid\", \"sort\", \"lot\", \"photo\", \"copy\", \"line\",\n","    \"alot\", \"promise\", \"opportunity\", \"detail\", \"chapter\", \"address\", \"ton\",\n","    \"thought\", \"memory\", \"pic\", \"crush\", \"fact\", \"card\", \"track\", \"alot\", \"way\",\n","    \"show\", \"result\", \"abt\", \"beat\", \"link\", \"hand\", \"tear\", \"dream\", \"secret\",\n","    \"choice\", \"point\", \"service\", \"energy\", \"moment\", \"vote\", \"week\", \"strength\",\n","    \"one\", \"question\", \"review\", \"clue\", \"idea\", \"little\", \"update\", \"color\",\n","    \"info\", \"weight\", \"advantage\", \"time\", \"style\", \"leg\", \"number\", \"load\",\n","    \"plenty\", \"package\", \"feeling\", \"version\", \"goal\", \"note\", \"problem\",\n","    \"title\", \"file\", \"effort\", \"sentence\", \"bad\", \"message\", \"award\", \"suggestion\",\n","    \"election\", \"mind\", \"control\",'pm','adminstration','action','thank','wednesday','saturday','help'\n","    'opinion','step',])\n","\n","\n","# Add custom stop words to spaCy's default stop words list\n","for word in custom_stop_words:\n","    nlp_customer2.Defaults.stop_words.add(word)\n","    nlp_customer2.vocab[word].is_stop = True\n","\n","\n","# Check if the custom stop words are added correctly\n","print(\"Custom stop words correctly added:\", all(nlp_customer2.vocab[word].is_stop for word in custom_stop_words))\n"],"metadata":{"id":"xvnHDIhmRnUg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267664722,"user_tz":-720,"elapsed":1486,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"ab62b820-548a-475f-d2a3-48bd65ef4c57"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Custom stop words correctly added: True\n"]}]},{"cell_type":"markdown","source":["\n","**3.2 compare extract strategies with static documents**\n","\n","1.   Find all types of nouns.\n","2.   Find all clauses and then extract the subjects.\n","3.   Find all subjects, direct objects, and prepositional objects.\n","4.   Find all types of nouns and their modifiers.\n","5.   Find all subjects and direct objects.\n","6.   Find all objects that participate in actions.\n","7.   NER (Named Entity Recognition)"],"metadata":{"id":"iBLdl-iiL5UV"}},{"cell_type":"code","source":["#customer extraction strategies\n","import spacy\n","from spacy.matcher import Matcher\n","from spacy.tokens import Span\n","\n","\n","# Load the spaCy model\n","#nlp = spacy.load(\"en_core_web_sm\") #small language model than en_core_web_md\n","\n","# Example text\n","text = \"\"\"\n","John bought a new car last week. The car is red and very fast. Mary, who is John's friend, loves driving fast cars. they donot care about global warming.\n","\"\"\"\n","text = \"\"\"\n","I know it has been a while since I have posted, I had an orgo test that occupied most of my time over the course of the last week. Some interesting new developments have occured.\n","\n","So Liz's fish have developed a disease. It is called ich. I suggested she go get some medicine at the pet store. When she went, the pet store guy told her that ich was caused by stress. He then asked her how many fish she had in the tank. When she told him that she had twelve fish in a two-gallon tank, the guy nearly flipped out. He asked her who the hell told her she could put so many fish in one tank; she told him it was another PetSmart guy. Oh well. An undiscovered hypothesis - a plague will fall upon the fish for living in such horrid conditions.\n","\n","I care about global warming.\n"," \"\"\"\n","\n","# Process the text\n","doc = nlp_customer2(text)\n","\n","\n","# Define Strategy 1: Extract all types of nouns\n","def find_nouns(doc):\n","  nouns = [token.lemma_.lower() for token in doc if token.pos_ in [\"NOUN\", \"PROPN\"] and not token.is_stop and token.is_alpha and len(token) > 1]\n","  return nouns\n","\n","# Find all clauses and then extract the subjects\n","def find_clauses_and_subjects(doc):\n","    subjects = [token.lemma_.lower()  for token in doc if token.dep_ in [\"nsubj\", \"nsubjpass\"] and not token.is_stop and token.is_alpha and len(token) > 1]\n","\n","    return subjects\n","\n","# Find all subjects, direct objects, and prepositional objects\n","def find_sdos_and_prep_objects(doc):\n","    elements = [token.lemma_.lower() for token in doc if token.dep_ in [\"nsubj\", \"nsubjpass\", \"dobj\", \"pobj\"] and not token.is_stop and token.is_alpha and len(token) > 1]\n","\n","    return elements\n","\n","\n","def find_nouns_and_modifiers(doc):\n","    extracted_nouns_phrases = []\n","\n","    # Extract individual nouns and their modifiers\n","    for token in doc:\n","        if token.pos_ in [\"NOUN\", \"PROPN\"] and not token.is_stop and token.is_alpha and len(token) > 1:\n","            modifiers = [child.text for child in token.children if child.dep_ in [\"amod\", \"compound\", \"det\"]]\n","            if modifiers:\n","                extracted_nouns_phrases.append(token.lemma_.lower())\n","\n","\n","    return extracted_nouns_phrases\n","\n","def find_chunk(doc):\n","  extracted_nouns_phrases = []\n","  # Extract noun phrases using noun_chunks\n","  for noun_chunk in doc.noun_chunks:\n","      # Filter out phrases containing stop words and non-alphabetical tokens\n","      if not any(token.is_stop for token in noun_chunk) and all(token.is_alpha for token in noun_chunk):\n","        phrase = noun_chunk.text.lower()\n","        if len(phrase.split()) >= 2:\n","            extracted_nouns_phrases.append(phrase)\n","\n","  return extracted_nouns_phrases\n","\n","# Find all subjects and direct objects\n","def find_subjects_and_direct_objects(doc):\n","    subjects_direct_objects = [token.lemma_.lower()  for token in doc if token.dep_ in [\"nsubj\", \"nsubjpass\", \"dobj\"] and not token.is_stop and token.is_alpha and len(token) > 1]\n","\n","    return subjects_direct_objects\n","\n","# Find all objects that participate in actions\n","#this is the best one!!!\n","def find_action_objects(doc):\n","    action_objects = [token.lemma_.lower()  for token in doc if token.dep_ in [\"dobj\", \"pobj\"] and token.head.pos_ == \"VERB\" and not token.is_stop and token.is_alpha and len(token) > 1]\n","\n","    return action_objects\n","\n","# Named Entity Recognition (NER)\n","def perform_ner(doc):\n","    entities = [(ent.text, ent.label_) for ent in doc.ents]\n","\n","    return entities\n","\n","\n","\n","def has_intersection(arr1, arr2):\n","    # Convert lists to sets\n","    set1 = set(arr1)\n","    set2 = set(arr2)\n","\n","    # Check if there is any intersection\n","    return not set1.isdisjoint(set2)\n","\n","# Run the functions\n","tokens_ex = find_nouns(doc)\n","tokens_ex = [word for word in tokens_ex if word not in custom_stop_words]\n","print(\"Nouns:\", tokens_ex)\n","\n","\n","#find_clauses_and_subjects(doc)\n","#find_sdos_and_prep_objects(doc)\n","#find_nouns_and_modifiers(doc)\n","#find_subjects_and_direct_objects(doc)\n","#find_action_objects(doc)\n","#find_chunk(doc)\n","#perform_ner(doc)\n","\n","tokens_ex = find_clauses_and_subjects(doc)\n","tokens_ex = [word for word in tokens_ex if word not in custom_stop_words]\n","print(\"Clauses and Subjects:\", tokens_ex)\n","\n","tokens_ex = find_sdos_and_prep_objects(doc)\n","tokens_ex = [word for word in tokens_ex if word not in custom_stop_words]\n","print(\"SDOs and Prepositional Objects:\", tokens_ex)\n","\n","tokens_ex = find_nouns_and_modifiers(doc)\n","tokens_ex = [word for word in tokens_ex if word not in custom_stop_words]\n","print(\"Nouns and Modifiers:\", tokens_ex)\n","\n","tokens_ex = find_subjects_and_direct_objects(doc)\n","tokens_ex = [word for word in tokens_ex if word not in custom_stop_words]\n","print(\"Subjects and Direct Objects:\", tokens_ex)\n","\n","tokens_ex = find_action_objects(doc)\n","tokens_ex = [word for word in tokens_ex if word not in custom_stop_words]\n","print(\"Action Objects:\", tokens_ex)\n","\n","tokens_ex = find_chunk(doc)\n","tokens_ex = [word for word in tokens_ex if word not in custom_stop_words]\n","print(\"Noun Chunks:\", tokens_ex)\n","\n","tokens_ex = perform_ner(doc)\n","tokens_ex = [word for word in tokens_ex if word[0] not in custom_stop_words]\n","print(\"Named Entities:\", tokens_ex)\n"],"metadata":{"id":"l2KALfj-tCaq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267664723,"user_tz":-720,"elapsed":4,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"db578b3a-9272-4242-d7a2-d5e2946c072b"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Nouns: ['orgo', 'course', 'development', 'liz', 'fish', 'disease', 'ich', 'medicine', 'store', 'store', 'ich', 'stress', 'fish', 'tank', 'fish', 'gallon', 'tank', 'fish', 'tank', 'petsmart', 'hypothesis', 'plague', 'fish', 'condition', 'warming']\n","Clauses and Subjects: ['development', 'fish', 'ich', 'hypothesis', 'plague']\n","SDOs and Prepositional Objects: ['course', 'development', 'fish', 'disease', 'medicine', 'store', 'ich', 'stress', 'fish', 'tank', 'fish', 'tank', 'fish', 'tank', 'hypothesis', 'plague', 'fish', 'condition', 'warming']\n","Nouns and Modifiers: ['course', 'development', 'disease', 'medicine', 'store', 'store', 'fish', 'tank', 'tank', 'fish', 'hypothesis', 'plague', 'fish', 'condition', 'warming']\n","Subjects and Direct Objects: ['development', 'fish', 'disease', 'medicine', 'ich', 'fish', 'fish', 'fish', 'hypothesis', 'plague']\n","Action Objects: ['disease', 'medicine', 'fish', 'fish', 'fish']\n","Noun Chunks: ['global warming']\n","Named Entities: [('the last week', 'DATE'), ('Liz', 'PERSON'), ('twelve', 'CARDINAL'), ('two-gallon', 'QUANTITY')]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["**3.3 Extract Strategies Selected**"],"metadata":{"id":"4lnhYoLGTdjp"}},{"cell_type":"code","source":["\n","\n","## Different Extraction Strategies\n","# Store tokens extracted by two different extraction strategies\n","if 'tokens1' not in blogs.columns:\n","    blogs['tokens1'] = [[] for _ in range(len(blogs))]\n","\n","if 'tokens2' not in blogs.columns:\n","    blogs['tokens2'] = [[] for _ in range(len(blogs))]\n","\n","\n","\n"],"metadata":{"id":"q-8RJxScTkU6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267664723,"user_tz":-720,"elapsed":3,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"bbd08490-f4f4-4ea5-f146-4bfabdd5f904"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["**3.4 Extract Features with 2 strategies**"],"metadata":{"id":"DolRQfJk7IUs"}},{"cell_type":"markdown","source":["1.    To conduct more accurate topic modeling, it is common to merge synonyms together. This can reduce vocabulary redundancy and improve the model's effectiveness. In this case, \"job\" and \"work\" can be considered synonyms and merged.\n","2.   extract\n","3.   combine with chunking"],"metadata":{"id":"y8RP8UUg6duL"}},{"cell_type":"code","source":["\n","# 预定义同义词映射\n","\n","synonym_map = {\n","    'job': 'work',\n","    'career': 'work',\n","    'occupation': 'work',\n","    'employment': 'work',\n","    'profession': 'work',\n","    'hire': 'work',\n","    'film': 'movie',\n","    'video': 'movie',\n","    'film': 'movie',\n","    'album': 'music',\n","    'song': 'music',\n","    'band': 'music',\n","    'cd': 'music',\n","    'article': 'book',\n","    'paper': 'book',\n","    'web_log': 'blog',\n","    'telephone': 'phone',\n","    'television': 'tv',\n","    'diary': 'journal',\n","    'narrative': 'story',\n","    'photograph': 'photo',\n","    'photograph': 'photo',\n","    'quizilla': 'quiz',\n","    'myocardial_infarction': 'heart_attack',\n","    'batch': 'group',\n","    'concert': 'performance',\n","    'camp': 'camping',\n","    'Air_National_Guard': 'military',\n","    'hypertext_markup_language': 'html',\n","    'Yay': 'yes',\n","    'birthday': 'celebration',\n","    'relationship': 'relation',\n","    'internet': 'web',\n","    'dress': 'clothe',\n","    'shop': 'store',\n","    'company': 'business',\n","    'office': 'workplace',\n","    'course': 'class',\n","    'calendar_month': 'month',\n","    'mother': 'parent',\n","    'town': 'city',\n","    'rock': 'music',\n","    'hope': 'aspiration',\n","    'self': 'individual',\n","    'college': 'university',\n","    'cat': 'animal',\n","    'foot': 'body_part',\n","    'arm': 'body_part',\n","    'aid': 'help',\n","    'government': 'administration',\n","    'president': 'leader',\n","    'religion': 'faith',\n","    'United_States': 'country',\n","    'lair': 'home',\n","    'Christmas': 'holiday',\n","    'album': 'music',\n","    'medium': 'media',\n","    'star': 'celebrity',\n","    'terrestrial_time': 'time'\n","}\n","\n","\n","synonym_map = {\n","    'work': 'work',\n","}\n","\n","\n","# 替换文本中的同义词\n","def get_synonym(word):\n","    return synonym_map.get(word, word)\n","\n","i = 0\n","for index, row in blogs.iterrows():\n","    content = row['Contents']\n","    # same pre-processing piple\n","    doc = nlp_customer2(content)\n","\n","    tokens_chunk = find_chunk(doc)\n","\n","    # Extract Strategies 1\n","    proj_tok1 = find_nouns(doc)\n","\n","    proj_tok1 = [get_synonym(noun) for noun in proj_tok1]\n","\n","    proj_tok1 = tokens_chunk + proj_tok1\n","\n","    # Remove custom stop words from proj_tok1\n","    proj_tok1 = [word for word in proj_tok1 if word not in custom_stop_words]\n","\n","\n","    # Extract Strategies 2\n","    proj_tok2 = find_action_objects(doc)\n","    proj_tok2 = [get_synonym(noun) for noun in proj_tok2]\n","    proj_tok2 = tokens_chunk + proj_tok2\n","    # Remove custom stop words from proj_tok1\n","    proj_tok2 = [word for word in proj_tok2 if word not in custom_stop_words]\n","\n","    i += 1\n","    if i < 5:\n","      print(\"--------------------:\")\n","      print(\"proj_tok1:\")\n","      print(\"content:\",content)\n","      print(\"doc:\",doc.text)\n","      print(\"proj_tok1:\",proj_tok1)\n","      print(\"proj_tok2:\",proj_tok2)\n","\n","\n","    # Update the 'tokens' column for the current row\n","    blogs.at[index, 'tokens1'] = proj_tok1\n","    blogs.at[index, 'tokens2'] = proj_tok2\n","\n","    # Print a log after every 100 rows processed\n","    if (i + 1) % 1000 == 0:\n","      print(f\"Processed {i + 1} rows.\")\n","\n","# After finishing the loop\n","print(\"Finished processing all rows.\")\n","\n","\n"],"metadata":{"id":"LZpej--o7B81","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267983673,"user_tz":-720,"elapsed":318952,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"95121ced-ec79-4b1c-fc04-effaedbd04f5"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["--------------------:\n","proj_tok1:\n","content: \r\n","\r\n","\t \r\n","      Yes, I know, I work too hard.  There's another  urlLink new entry   on Malarkey.\r\n","     \r\n","\r\n","    \r\n","\n","doc: \r\n","\r\n","\t \r\n","      Yes, I know, I work too hard.  There's another  urlLink new entry   on Malarkey.\r\n","     \r\n","\r\n","    \r\n","\n","proj_tok1: ['malarkey']\n","proj_tok2: []\n","--------------------:\n","proj_tok1:\n","content: \r\n","\r\n","\t \r\n","      hello peoples!  OMG!  i have like so much stuff to do this week.  i have a chem test tomorrow and a test in both precal and spanish thursday.  i have a project to turn in for chemistry on thursday cause i wont be at school friday.  i have to write up some thing for spanish cause i wont be there friday for the stupid thing.  and i have a bunch of stuff to finalize for mexico.  yeah for those that dont know i wont be at school on friday cause ill be on my way to mexico and i get bck the following friday.  its gonna be fun.  ill miss you all though!  but ill at least have that saturday and sunday to hang out.  but yeah just a bunch of stuff to do between tonight and tomorrow.    i called bryant today!  i was going to see if he wanted to hang out or something.  he couldnt today cause he was busy with some stuff, but he said that he would probably come find me during lunch tomorrow.  for those that dont know, he leaves after 4th period.  but yeah he said he would probably stop by, and i might have a chance to hang out with him after school tomorrow.  if things go well during lunch i might see if he wants to go to a movie or something.  i probably shouldnt just cause i have a bunch to do, but ill be staying up late anyways so i might as well make it productive by working on all eight thousand projects i have.  i get to hang out with bryant so it doesnt matter  ^_^    i've never really met someone that made me happy like this.  i dont know what it is...  but once again i shouldnt get ahead of myself.  ive only talked to him a couple times and its not like we are going out or anything, its just as friends.  but hey, someday we might go out.  that would be so great.  so for the time being he is considered a \"friend with possibilities\"  ::warning ranting ahead:: grrrr!  my parents picked me up a little late from school today.  try 3:35 to be exact.  it wasnt horriblely late but they always complain when im like 30 seconds late.  so yeah i wasnt happy about that.  but then afterwards my mom decides we need to go grocery shopping. its not like she can drop me off at home first or anything.  so yeah i finally got home at like 5pm.  i was jsut disgruntled cause i really wanted to get home to work on some stuff.    oh yeh im done ranting now.  i just had to get that out.  for some reason ive been really tired the last couple of days.  yeah, ive slept like crap and all but this is a different kind of tired.  its really wierd, im not quite sure how to explain it either.  oh yeah, hopefully it will get better before i head to mexico.\r\n","     \r\n","    \r\n","\n","doc: \r\n","\r\n","\t \r\n","      hello peoples!  OMG!  i have like so much stuff to do this week.  i have a chem test tomorrow and a test in both precal and spanish thursday.  i have a project to turn in for chemistry on thursday cause i wont be at school friday.  i have to write up some thing for spanish cause i wont be there friday for the stupid thing.  and i have a bunch of stuff to finalize for mexico.  yeah for those that dont know i wont be at school on friday cause ill be on my way to mexico and i get bck the following friday.  its gonna be fun.  ill miss you all though!  but ill at least have that saturday and sunday to hang out.  but yeah just a bunch of stuff to do between tonight and tomorrow.    i called bryant today!  i was going to see if he wanted to hang out or something.  he couldnt today cause he was busy with some stuff, but he said that he would probably come find me during lunch tomorrow.  for those that dont know, he leaves after 4th period.  but yeah he said he would probably stop by, and i might have a chance to hang out with him after school tomorrow.  if things go well during lunch i might see if he wants to go to a movie or something.  i probably shouldnt just cause i have a bunch to do, but ill be staying up late anyways so i might as well make it productive by working on all eight thousand projects i have.  i get to hang out with bryant so it doesnt matter  ^_^    i've never really met someone that made me happy like this.  i dont know what it is...  but once again i shouldnt get ahead of myself.  ive only talked to him a couple times and its not like we are going out or anything, its just as friends.  but hey, someday we might go out.  that would be so great.  so for the time being he is considered a \"friend with possibilities\"  ::warning ranting ahead:: grrrr!  my parents picked me up a little late from school today.  try 3:35 to be exact.  it wasnt horriblely late but they always complain when im like 30 seconds late.  so yeah i wasnt happy about that.  but then afterwards my mom decides we need to go grocery shopping. its not like she can drop me off at home first or anything.  so yeah i finally got home at like 5pm.  i was jsut disgruntled cause i really wanted to get home to work on some stuff.    oh yeh im done ranting now.  i just had to get that out.  for some reason ive been really tired the last couple of days.  yeah, ive slept like crap and all but this is a different kind of tired.  its really wierd, im not quite sure how to explain it either.  oh yeah, hopefully it will get better before i head to mexico.\r\n","     \r\n","    \r\n","\n","proj_tok1: ['grocery shopping', 'chem', 'thursday', 'chemistry', 'thursday', 'bunch', 'mexico', 'mexico', 'bck', 'bunch', 'bryant', 'lunch', 'lunch', 'movie', 'bunch', 'bryant', 'possibility', 'grocery', 'shopping', 'jsut', 'yeh', 'mexico']\n","proj_tok2: ['grocery shopping', 'bunch', 'bck', 'bunch', 'grrrr', 'shopping']\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["--------------------:\n","proj_tok1:\n","content: \r\n","\r\n","     \r\n","       urlLink      Keeping the future in view, I guess.     Today I saw a caterpillar drop out of a tree onto an asphalt driveway. It was the sad little plop of his body hitting the pavement that got my attention.  Ouch.  Dreaming about butterflies again, little fellow?      He just lay there, stunned. Didn't move at all. After about a minute I felt compelled to help the poor guy. As soon as I touched him, he started writhing, kicking his miniscule legs in defiance of the rescue attempt. I tossed him onto the lawn against his will.  Good grief.  Where did the little jerk pick up his approach to an offer of help? Us humans?  \r\n","     \r\n","    \r\n","\n","doc: \r\n","\r\n","     \r\n","       urlLink      Keeping the future in view, I guess.     Today I saw a caterpillar drop out of a tree onto an asphalt driveway. It was the sad little plop of his body hitting the pavement that got my attention.  Ouch.  Dreaming about butterflies again, little fellow?      He just lay there, stunned. Didn't move at all. After about a minute I felt compelled to help the poor guy. As soon as I touched him, he started writhing, kicking his miniscule legs in defiance of the rescue attempt. I tossed him onto the lawn against his will.  Good grief.  Where did the little jerk pick up his approach to an offer of help? Us humans?  \r\n","     \r\n","    \r\n","\n","proj_tok1: ['future', 'view', 'drop', 'tree', 'asphalt', 'driveway', 'plop', 'pavement', 'butterfly', 'fellow', 'defiance', 'rescue', 'attempt', 'lawn', 'grief', 'jerk', 'approach', 'offer', 'help', 'human']\n","proj_tok2: ['future', 'drop', 'pavement', 'approach']\n","--------------------:\n","proj_tok1:\n","content: \r\n","\r\n","    \r\n","       \r\n","      ohhh, I feel so bad, so bad, so bad....  It's been awhile since I've been this depressed. But the last time I was like this, it was because things were going really really shitty. And now they're not. In fact, they've been really, really good. But for some reason, in the middle of the day today I realized that I'm incredibly depressed about something but I'm not even really sure what it is. And I cried. For the first time in ages, I really cried. I hadn't cried like this since like, February after MMISL audits. I got up to put out my candle and I was listening to Jump Little Children and I fell down, I don't know if it was the song or I was just crying too hard. Either way I just couldn't control myself.  And I have no reason to be upset. Everything has been going great. I just can't appreciate what I have, that's all.  I want to see them.  Fuck this sad shit. Let me smoke my marlboro and I'll be on my way.  Have a great weekend, children. Oh and looking past the sadness, I have some additions to my 'I love' list: nail salons, lotion, body parts, cd covers, drum solos, and big headphones. \r\n","       \r\n","    \r\n","    \r\n","\n","doc: \r\n","\r\n","    \r\n","       \r\n","      ohhh, I feel so bad, so bad, so bad....  It's been awhile since I've been this depressed. But the last time I was like this, it was because things were going really really shitty. And now they're not. In fact, they've been really, really good. But for some reason, in the middle of the day today I realized that I'm incredibly depressed about something but I'm not even really sure what it is. And I cried. For the first time in ages, I really cried. I hadn't cried like this since like, February after MMISL audits. I got up to put out my candle and I was listening to Jump Little Children and I fell down, I don't know if it was the song or I was just crying too hard. Either way I just couldn't control myself.  And I have no reason to be upset. Everything has been going great. I just can't appreciate what I have, that's all.  I want to see them.  Fuck this sad shit. Let me smoke my marlboro and I'll be on my way.  Have a great weekend, children. Oh and looking past the sadness, I have some additions to my 'I love' list: nail salons, lotion, body parts, cd covers, drum solos, and big headphones. \r\n","       \r\n","    \r\n","    \r\n","\n","proj_tok1: ['mmisl audits', 'nail salons', 'cd covers', 'drum solos', 'big headphones', 'february', 'mmisl', 'audits', 'candle', 'song', 'sadness', 'addition', 'nail', 'salon', 'lotion', 'part', 'cd', 'cover', 'drum', 'solo', 'headphone']\n","proj_tok2: ['mmisl audits', 'nail salons', 'cd covers', 'drum solos', 'big headphones', 'candle', 'marlboro', 'addition', 'salon']\n","Processed 1000 rows.\n","Processed 2000 rows.\n","Processed 3000 rows.\n","Processed 4000 rows.\n","Processed 5000 rows.\n","Processed 6000 rows.\n","Processed 7000 rows.\n","Processed 8000 rows.\n","Processed 9000 rows.\n","Processed 10000 rows.\n","Finished processing all rows.\n"]}]},{"cell_type":"code","source":["print(blogs[['tokens1', 'tokens2']].head(10))"],"metadata":{"id":"kMMzRRA7n6NL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267983673,"user_tz":-720,"elapsed":13,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"b8967fdf-f722-4ddd-d4f3-87c2009cd0e9"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["                                                                                                                                                                                                                                                                                                           tokens1  \\\n","209225                                                                                                                                                                                                                                                                                                  [malarkey]   \n","211629                                                                                                                   [grocery shopping, chem, thursday, chemistry, thursday, bunch, mexico, mexico, bck, bunch, bryant, lunch, lunch, movie, bunch, bryant, possibility, grocery, shopping, jsut, yeh, mexico]   \n","429713                                                                                                                                                [future, view, drop, tree, asphalt, driveway, plop, pavement, butterfly, fellow, defiance, rescue, attempt, lawn, grief, jerk, approach, offer, help, human]   \n","26813                                                                                                                    [mmisl audits, nail salons, cd covers, drum solos, big headphones, february, mmisl, audits, candle, song, sadness, addition, nail, salon, lotion, part, cd, cover, drum, solo, headphone]   \n","358019                                                                                                                                                                                       [servin breakfast, sugar, mama, dance, joyride, looped, lady, sugar, mommy, lemme, breakfast, looped, pant, everyday]   \n","653179                                                                                                                            [adjoining rooms, birthday, birthday, success, seaworld, hotel, kitchen, balcony, seaworld, success, degree, disneyland, start, tick, sheet, position, throw, stomach, job, job]   \n","265327                                                                                                                                                                                                                                                   [goo kids, future, family, stranger, job, goo, education]   \n","669842                                                                                                                                                                                                                                                                   [mega retail outlets, outlet, rpg, moeny]   \n","348846                                                      [audi, tt, clydebank, race, explanation, nicola, dentist, humid, tt, helensburgh, pb, race, confusion, start, confusion, clock, congestion, park, km, pace, check, target, mark, km, nicola, race, recovery, pb, nope, dumbarton, kirkintilloch, june]   \n","57697   [radio propagation, solar flares, warner, cable, resume, support, position, interview, position, drive, car, basis, job, interview, hope, job, radio, ham, event, sun, interest, hobby, condition, sun, role, radio, propagation, flare, condition, radio, condition, aurora, texas, ohio, aurora, aurora]   \n","\n","                                                                                                      tokens2  \n","209225                                                                                                     []  \n","211629                                                 [grocery shopping, bunch, bck, bunch, grrrr, shopping]  \n","429713                                                                     [future, drop, pavement, approach]  \n","26813   [mmisl audits, nail salons, cd covers, drum solos, big headphones, candle, marlboro, addition, salon]  \n","358019                                                                              [servin breakfast, lemme]  \n","653179                                                                   [adjoining rooms, success, job, job]  \n","265327                                                                             [goo kids, job, education]  \n","669842                                                                                  [mega retail outlets]  \n","348846                                                                                               [tt, pb]  \n","57697                           [radio propagation, solar flares, hope, job, role, condition, aurora, aurora]  \n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["##**Step 4. Vector Strategies**\n","\n","**4.1 Split token data to different Categories**"],"metadata":{"id":"B8UNBcMxIteX"}},{"cell_type":"code","source":["\n","# Define category columns\n","category_columns = ['Males', 'Females', 'Age_Under_21', 'Age_Over_20', 'Students', 'Everyone']\n","\n","# Reshape the dataframe using pd.melt\n","blogs_melted = pd.melt(blogs, id_vars=['Filename', 'Date', 'Contents', 'BlogUserID', 'Gender', 'Age', 'Tag', 'zodiac', 'Contents_len', 'tokens1', 'tokens2'],\n","                       value_vars=category_columns,\n","                       var_name='category', value_name='Value')\n","\n","# Keep only rows where Value is 1\n","blogs_melted = blogs_melted[blogs_melted['Value'] == 1].drop(columns=['Value'])\n","\n","# Print the shape of the reshaped dataframe\n","print(\"Shape of the reshaped dataframe:\")\n","print(blogs_melted.shape)\n","\n","# Count the number of entries in each category\n","category_counts = blogs_melted['category'].value_counts()\n","\n","# Print the number of entries in each category\n","print(\"\\nNumber of entries in each category:\")\n","print(category_counts)\n","\n","# Print the reshaped dataframe\n","print(\"\\nReshaped dataframe:\")\n","#print(blogs_melted.head(10))"],"metadata":{"id":"BG3OH5_yAmtD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267983673,"user_tz":-720,"elapsed":5,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"d1fd93a7-9f8b-4427-a753-1a51ab6885f0"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of the reshaped dataframe:\n","(32272, 12)\n","\n","Number of entries in each category:\n","category\n","Everyone        10000\n","Age_Over_20      6647\n","Females          5068\n","Males            4932\n","Age_Under_21     3353\n","Students         2272\n","Name: count, dtype: int64\n","\n","Reshaped dataframe:\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["blogs_melted.info()"],"metadata":{"id":"ch-sF_hOq3L0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267983673,"user_tz":-720,"elapsed":3,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"a74cb5fe-a1b7-45c3-d94d-9038f5a16683"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 32272 entries, 1 to 59999\n","Data columns (total 12 columns):\n"," #   Column        Non-Null Count  Dtype \n","---  ------        --------------  ----- \n"," 0   Filename      32272 non-null  object\n"," 1   Date          32272 non-null  object\n"," 2   Contents      32272 non-null  object\n"," 3   BlogUserID    32272 non-null  object\n"," 4   Gender        32272 non-null  object\n"," 5   Age           32272 non-null  object\n"," 6   Tag           32272 non-null  object\n"," 7   zodiac        32272 non-null  object\n"," 8   Contents_len  32272 non-null  int64 \n"," 9   tokens1       32272 non-null  object\n"," 10  tokens2       32272 non-null  object\n"," 11  category      32272 non-null  object\n","dtypes: int64(1), object(11)\n","memory usage: 3.2+ MB\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["**4.2 Different VECTORIZATION Strategies**\n","\n","1.   Function to Create BoW/TFIDF Topic Model\n","2.   Function to get different extracted token"],"metadata":{"id":"AV-p6CNYBfXC"}},{"cell_type":"code","source":["from gensim.models import TfidfModel\n","\n","from random import sample\n","\n","\n","# Create dictionary\n","# I will apply the Dictionary Object from Gensim, which maps each word to their unique ID:\n","dictionary1 = Dictionary(blogs_melted['tokens1'])\n","dictionary2 = Dictionary(blogs_melted['tokens2'])\n","#print(dictionary.token2id)\n","\n","category_columns = ['Males', 'Females', 'Age_Under_21', 'Age_Over_20', 'Students', 'Everyone']\n","\n","# Filter dictionary\n","dictionary1.filter_extremes(no_below=5, no_above=0.5, keep_n=1000)\n","dictionary2.filter_extremes(no_below=5, no_above=0.5, keep_n=1000)\n","\n","def get_dictionary(token_column):\n","  if token_column == 'tokens1':\n","    return dictionary1\n","  elif token_column == 'tokens2':\n","    return dictionary2\n","  else:\n","    raise ValueError(\"Invalid token_column. Choose either 'tokens1' or 'tokens2'.\")\n","\n","# Define a function to compute corpus\n","def compute_corpus(category, token_column, corpus_type):\n","  print(f\"======Category: {category}, Token Column: {token_column}, Corpus Type: {corpus_type}\")\n","  # Compute BoW\n","  bow_corpus = [get_dictionary(token_column).doc2bow(doc) for doc in blogs_melted[blogs_melted['category'] == category][token_column]]\n","\n","  if corpus_type == 'bow':\n","      sampled_bow = sample(bow_corpus, min(2, len(bow_corpus)))\n","      print(\"Sampled BoW elements:\", sampled_bow)\n","      return bow_corpus\n","  elif corpus_type == 'tfidf':\n","      # Initialize TFIDF model\n","      tfidf = TfidfModel(bow_corpus)  # fit model\n","      # Compute TFIDF corpus\n","      tfidf_corpus = [tfidf[doc] for doc in bow_corpus]\n","      sampled_tfidf = sample(tfidf_corpus, min(2, len(tfidf_corpus)))\n","      print(\"Sampled TFIDF elements:\", sampled_tfidf)\n","      return tfidf_corpus\n","  else:\n","      raise ValueError(\"Invalid corpus_type. Choose either 'bow' or 'tfidf'.\")\n","\n","# Define a function to filter the dataframe\n","def filter_dataframe(category, token_column_name):\n","    # Filter the dataset\n","    filtered_df = blogs_melted[blogs_melted['category'] == category].copy()\n","\n","    # Rename tokens column\n","    filtered_df.rename(columns={token_column_name: 'tokens'}, inplace=True)\n","\n","    # Keep the required columns and return\n","    columns_to_keep = ['Filename', 'Date', 'Contents', 'BlogUserID', 'Gender', 'Age', 'Tag', 'zodiac', 'Contents_len', 'tokens']\n","    return filtered_df[columns_to_keep]\n","\n","\n"],"metadata":{"id":"RGGgV-t67khh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267985204,"user_tz":-720,"elapsed":1533,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"27d1f823-a575-4ddc-ecd9-69b816b0bffb"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["##**Step 5. Function to Show Topic Result**\n","\n","\n","5.1 Latent Dirichlet Allocation (LDA)\n","\n","\n","1. LDA model building and  try to find best number of topics  \n","2. Print topics  \n","4. Visualize topics with pyLDAvis\n","5. Save the report to html\n","6. Determine which topics each document belongs to\n","7. Print the original content of each document  "],"metadata":{"id":"OnZsWM4dalK7"}},{"cell_type":"code","source":["Show_coherence_analysis = 1\n","\n","def print_topics(corpus1,dataFrame_doc1,dic1,title1):\n","  global Show_coherence_analysis\n","  print(title1+\"========================================\")\n","\n","  if Show_coherence_analysis == 1:\n","    # Coherence score using C_umass:\n","    topics = []\n","    score = []\n","    for i in range(1,20,1):\n","      lda_model = LdaMulticore(corpus=corpus1, id2word=dic1, iterations=10, num_topics=i, workers = 12, passes=10, random_state=100)\n","      cm = CoherenceModel(model=lda_model, corpus=corpus1, dictionary=dic1, coherence='u_mass')\n","      topics.append(i)\n","      score.append(cm.get_coherence())\n","    _=plt.plot(topics, score)\n","    _=plt.xlabel('Number of Topics')\n","    _=plt.ylabel('Coherence Score')\n","    plt.title('Coherence Score using U_Mass')\n","    plt.show()\n","\n","    # Coherence score using C_v: more professional\n","    topics = []\n","    score = []\n","    for i in range(1,20,1):\n","      lda_model = LdaMulticore(corpus=corpus1, id2word=dic1, iterations=10, num_topics=i, workers = 12, passes=10, random_state=100)\n","      cm = CoherenceModel(model=lda_model, texts = dataFrame_doc1['tokens'], corpus=corpus1, dictionary=dic1, coherence='c_v')\n","      topics.append(i)\n","      score.append(cm.get_coherence())\n","    _=plt.plot(topics, score)\n","    _=plt.xlabel('Number of Topics')\n","    _=plt.ylabel('Coherence Score')\n","    plt.title('Coherence Score using C_v')\n","    plt.show()\n","\n","\n","  # LDA model building， LdaMulticore has good performance on multi-cores cpu\n","  lda_model = LdaMulticore(corpus=corpus1, id2word=dic1, iterations=50, num_topics=7, workers = 12, passes=10)\n","\n","  # Visualize topics\n","  lda_display = pyLDAvis.gensim_models.prepare(lda_model, corpus1, dic1)\n","  pyLDAvis.display(lda_display)\n","\n","  # Save the report\n","  global run_local\n","  if run_local ==1:\n","    pyLDAvis.save_html(lda_display, '/content/drive/textMining/'+title1+'.html')\n","  else:\n","    pyLDAvis.save_html(lda_display, '/content/drive/MyDrive/Colab Notebooks/TextMining/report/html/'+title1+'.html')\n","\n","\n","  # Identify the two dominant topics\n","  topic_weights = []\n","  for i, row_list in enumerate(lda_model[corpus1]):\n","    row = sorted(row_list, key=lambda x: x[1], reverse=True)\n","    topic_weights.append(row[0])\n","\n","  topic_weights_df = pd.DataFrame(topic_weights, columns=['Dominant_Topic', 'Perc_Contribution'])\n","\n","  dominant_topics = topic_weights_df['Dominant_Topic'].value_counts().nlargest(2).index.tolist()\n","\n","\n","  # Output clauses corresponding to the dominant topics\n","  for topic_num in dominant_topics:\n","      print(f\"\\nDocuments for Topic {topic_num}:\")\n","      count = 0\n","      for i, row_list in enumerate(lda_model[corpus1]):\n","          row = sorted(row_list, key=lambda x: x[1], reverse=True)\n","          if row[0][0] == topic_num:\n","              print(dataFrame_doc1['Contents'].iloc[i])\n","              count += 1\n","              if count >= 2:\n","                  break\n","\n","  # Generate word clouds for the dominant topics\n","  for topic_num in dominant_topics:\n","      plt.figure(figsize=(10, 5))\n","      wordcloud = WordCloud(background_color='white', width=800, height=400).fit_words(dict(lda_model.show_topic(topic_num, 200)))\n","      plt.imshow(wordcloud)\n","      plt.axis('off')\n","      plt.title(f\"Word Cloud for Topic {topic_num}\")\n","      plt.show()\n","\n"],"metadata":{"id":"fEACtxVp1ecx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716267985204,"user_tz":-720,"elapsed":4,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"a81e086a-8330-4111-e9d8-dd9e6ffb72a5"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["#**Step 6. comparesion of Different Strategies**"],"metadata":{"id":"4gEuhcbvm_9B"}},{"cell_type":"code","source":["# Define data categories\n","category_columns = ['Males', 'Females', 'Age_Under_21', 'Age_Over_20', 'Students', 'Everyone']\n","# 2 Extraction Strategies\n","token_columns = ['tokens1', 'tokens2']\n","# 2 Vector Strategies\n","corpus_types = ['bow', 'tfidf']\n","\n","# There are a total of 24 combinations\n","\n","def caculate_topic(category, token_column, corpus_type):\n","  corpus = compute_corpus(category, token_column, corpus_type)\n","  dataFrame_doc = filter_dataframe(category, token_column)\n","  print_topics(corpus1=corpus\n","               ,dataFrame_doc1= dataFrame_doc\n","               ,dic1= get_dictionary(token_column)\n","               ,title1 = category + \"_\" + token_column + \"_\" + corpus_type)\n","\n","Show_coherence_analysis =1\n","caculate_topic('Everyone', 'tokens2', 'tfidf')\n","\n","Show_coherence_analysis =0\n","caculate_topic('Everyone', 'tokens1', 'tfidf')\n","caculate_topic('Everyone', 'tokens2', 'bow')\n","caculate_topic('Everyone', 'tokens1', 'bow')\n","\n","\n","\n","\n","# Generate all combinations and call compute_corpus and print_topics\n","#for category in category_columns:\n","#    for token_column in token_columns:\n","#        for corpus_type in corpus_types:\n","#            caculate_topic(category, token_column, corpus_type)\n","#            print(\"\\n\")\n","\n"],"metadata":{"id":"lnQd9qvLirYP","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1B-XYtFJxEPcS86d5EGGrDsf9vCAj9H9k"},"executionInfo":{"status":"ok","timestamp":1716268256087,"user_tz":-720,"elapsed":270886,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"183f7d96-f6cd-4bc8-d96d-ae0dc51301a8"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["#**Step 7. Final Report for every categories**"],"metadata":{"id":"7-ob9fvbAOGZ"}},{"cell_type":"code","source":["\n","caculate_topic('Everyone', 'tokens2', 'tfidf')\n","caculate_topic('Males', 'tokens2', 'tfidf')\n","caculate_topic('Females', 'tokens2', 'tfidf')\n","caculate_topic('Age_Under_21', 'tokens2', 'tfidf')\n","caculate_topic('Age_Over_20', 'tokens2', 'tfidf')\n","caculate_topic('Students', 'tokens2', 'tfidf')"],"metadata":{"id":"y64uK_O1ANN3","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1aUG1iJ5hzWpdP5Z1Lc7iSqO2iaoSU7eK"},"executionInfo":{"status":"ok","timestamp":1716268296256,"user_tz":-720,"elapsed":40173,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"746d35ea-5146-43a7-9e89-459b2071641c"},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["**Final topic result**"],"metadata":{"id":"S8RvZQEGF_UY"}},{"cell_type":"code","source":["def print_topics2(corpus1,dataFrame_doc1,dic1,title1):\n","  # Build LDA model\n","  lda_model = LdaMulticore(corpus=corpus1, id2word=dic1, iterations=50, num_topics=2, workers = 4, passes=10)\n","\n","  # Print the topics\n","  print(title1,\"=========================\")\n","\n","   # Generate word clouds for each topic\n","  for t in range(min(2, lda_model.num_topics)):\n","      plt.figure()\n","      plt.imshow(WordCloud().fit_words(dict(lda_model.show_topic(t, 200))))\n","      plt.axis(\"off\")\n","      plt.title(\"Topic #\" + str(t))\n","      plt.show()\n","\n","  topics = lda_model.print_topics(num_words=10)\n","  for topic in topics:\n","      print(topic)\n","\n","  # Compute Coherence Score\n","  coherence_model_lda = CoherenceModel(model=lda_model, texts=dataFrame_doc1['tokens'], dictionary=dic1, coherence='c_v')\n","  coherence_lda = coherence_model_lda.get_coherence()\n","  print('\\n1.=== Coherence Score: ', coherence_lda)\n","\n","\n","  # Get the topic distribution for each document\n","  doc_topics = lda_model.get_document_topics(corpus1)\n","\n","  # Print the topic distribution for the first few documents\n","  for i, doc in enumerate(doc_topics[:2]):\n","      print(f\"Document {i}:\")\n","      for topic_num, prob in doc:\n","          print(f\"  Topic {topic_num}: {prob:.4f}\")\n","\n","  # Count the number of documents associated with each topic\n","  topic_counts = [0] * lda_model.num_topics\n","  for doc in doc_topics:\n","      for topic_num, prob in doc:\n","          if prob > 0.1:  # Assuming a threshold probability of 0.1 for a document to be associated with a topic\n","              topic_counts[topic_num] += 1\n","\n","  # Print the topic coverage\n","  for topic_num, count in enumerate(topic_counts):\n","      print(f\"Topic {topic_num}: {count} documents\")\n","\n","\n","def caculate_topic2(category, token_column, corpus_type):\n","  corpus = compute_corpus(category, token_column, corpus_type)\n","  dataFrame_doc = filter_dataframe(category, token_column)\n","  print_topics2(corpus1=corpus\n","               ,dataFrame_doc1= dataFrame_doc\n","               ,dic1= get_dictionary(token_column)\n","               ,title1 = category + \"_\" + token_column + \"_\" + corpus_type)\n","\n","\n","caculate_topic2('Everyone', 'tokens2', 'tfidf')\n","caculate_topic2('Males', 'tokens2', 'tfidf')\n","caculate_topic2('Females', 'tokens2', 'tfidf')\n","caculate_topic2('Age_Under_21', 'tokens2', 'tfidf')\n","caculate_topic2('Age_Over_20', 'tokens2', 'tfidf')\n","caculate_topic2('Students', 'tokens2', 'tfidf')\n","\n","\n"],"metadata":{"id":"royX7lJ5Hln-","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1f9NxwXMvatWgWtKAwjqtTm4pyzZM0UGn"},"executionInfo":{"status":"ok","timestamp":1716268333666,"user_tz":-720,"elapsed":37419,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"e38dcaae-f4cb-4491-9eff-660fa74c0ef9"},"execution_count":36,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["# **CONCLUSION:**"],"metadata":{"id":"0GPaH_rGDnFo"}},{"cell_type":"markdown","source":["**Local Environment**"],"metadata":{"id":"h1PN6MRPCjy8"}},{"cell_type":"code","source":["import sys\n","import platform\n","import psutil\n","import tensorflow as tf\n","\n","def get_hardware_info():\n","    info = {}\n","    info['CPU Count'] = psutil.cpu_count(logical=False)\n","    info['Logical CPU Count'] = psutil.cpu_count(logical=True)\n","    info['Total Memory (GB)'] = psutil.virtual_memory().total / (1024 ** 3)\n","\n","    if tf.test.gpu_device_name():\n","        gpu_devices = tf.config.experimental.list_physical_devices('GPU')\n","        info['GPU'] = gpu_devices[0].name\n","        info['GPU Memory (GB)'] = tf.config.experimental.get_memory_info('GPU:0')['current'] / (1024 ** 3)\n","    else:\n","        info['GPU'] = 'No GPU available'\n","\n","    return info\n","\n","def get_software_info():\n","    info = {}\n","    info['Python Version'] = sys.version\n","    info['TensorFlow Version'] = tf.__version__\n","    info['Platform'] = platform.platform()\n","\n","    return info\n","\n","hardware_info = get_hardware_info()\n","software_info = get_software_info()\n","\n","print(\"Hardware Information:\")\n","for key, value in hardware_info.items():\n","    print(f\"{key}: {value}\")\n","\n","print(\"\\nSoftware Information:\")\n","for key, value in software_info.items():\n","    print(f\"{key}: {value}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lki0l1zhGVmL","executionInfo":{"status":"ok","timestamp":1716268336127,"user_tz":-720,"elapsed":2471,"user":{"displayName":"Kong Kong","userId":"12174995287770087580"}},"outputId":"54da13c8-7c91-4a23-9ebe-6a07da044b0b"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Hardware Information:\n","CPU Count: 4\n","Logical CPU Count: 8\n","Total Memory (GB): 50.99364471435547\n","GPU: No GPU available\n","\n","Software Information:\n","Python Version: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]\n","TensorFlow Version: 2.15.0\n","Platform: Linux-6.1.85+-x86_64-with-glibc2.35\n"]}]},{"cell_type":"markdown","source":["## **Extraction Strategies Conclusion :**\n","\n","\n","##**Vector Strategies Conclusion :**\n","\n"],"metadata":{"id":"hvXLhUitZNj9"}}]}